#LyX 1.6.5 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass report
\begin_preamble
\usepackage{ae,aecompl}
\usepackage{hyperref}
\end_preamble
\use_default_options false
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\float_placement tp
\paperfontsize default
\spacing single
\use_hyperref false
\papersize a4paper
\use_geometry true
\use_amsmath 1
\use_esint 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\leftmargin 1cm
\topmargin 1cm
\rightmargin 1cm
\bottommargin 2cm
\secnumdepth 5
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
\begin_inset Graphics
	filename yeti.png
	lyxscale 25
	width 25col%

\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\family sans
\series bold
\size giant
The
\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset

(yet-in)
\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset

complete
\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset

guide
\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset

to
\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset

Soya 3D
\family default
\series default
\size default

\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Newline newline
\end_inset


\size normal
(also known as 
\begin_inset Quotes eld
\end_inset

the yet-in
\begin_inset Quotes erd
\end_inset

)
\end_layout

\begin_layout Author
LAMY Jean-Baptiste 
\begin_inset Quotes eld
\end_inset

Jiba
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Chapter
Introduction
\end_layout

\begin_layout Section
License
\end_layout

\begin_layout Standard
Permission is granted to copy, distribute and/or modify this document under
 the terms of the GNU Free Documentation License, Version 1.1 or any later
 version published by the Free Software Foundation; with no Invariant Sections,
 no Front-Cover Texts, and no Back-Cover Texts.
 A copy of the license is included in the soya/doc directory, and can also
 be found online on 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://gnu.org
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
The Yeti picture on the cover was drawn by Jean-noÃ«l Lafargue (jn (at) hyperbate
 (dot) com), and is available under the Free Art License (
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://artlibre.org/licence/lal/en/
\end_layout

\end_inset

).
\end_layout

\begin_layout Section
What is Soya 3D ?
\end_layout

\begin_layout Section
History
\end_layout

\begin_layout Standard
The actual Soya was originally written by Jiba and Blam.
 Jiba is the man that has written seven 3D engines:
\end_layout

\begin_layout Enumerate
a 3D engine ("Vertige 3D") in visual basic + direct X
\end_layout

\begin_layout Enumerate
a 3D engine in visual basic + OpenGL (direct X was too horrible)
\end_layout

\begin_layout Enumerate
a second 3D engine in visual basic + OpenGL (rewrite of the previous one)
\end_layout

\begin_layout Enumerate
a 3D engine ("Opale.Soya") in Java + OpenGL (my last engine was too big to
 compile with VB!)
\end_layout

\begin_layout Enumerate
a 3D engine ("Opale.Soya 2") in Java + OpenGL (rewrite of the previous one,
 with my brother Blam)
\end_layout

\begin_layout Enumerate
a 3D engine ("Soya" < 0.7) in Python + C + OpenGL (Python was now more appealing
 for me than Java, still helped by Blam for the C part)
\end_layout

\begin_layout Enumerate
a 3D engine ("Soya" >= 0.7) in Python + Pyrex + OpenGL (I was not at ease
 with C and Blam was gone)
\end_layout

\begin_layout Standard
The engine in visual basic have never been published (I haven't got the
 Internet at this time!).
 The Java engine have been published and can still be found on the web;
 in particular they were used in Arkanae.
 They are no longer maintained.
\end_layout

\begin_layout Standard
Then, after trying an aggressive take-over on Soya, Arc Riley has forked
 the project into PySoy, on June the 6th in 2006.
 Arc still own the soya3d.org domain name, and use it as a placeholder spreading
 false and slanderous allegations.
\end_layout

\begin_layout Standard
Arc was considering me (=Jiba) as a 
\begin_inset Quotes eld
\end_inset

bad leader
\begin_inset Quotes erd
\end_inset

 for the project.
 After having written the Soya 3D engine and several games (including Arkanae,
 Slune, Balazar and Balazar Brothers), I consider that I am definitevely
 a great leader and that the technical directions I have chosen are right.
 I don't claim being a good manager, though ;-)
\end_layout

\begin_layout Standard
You can find more historical information on 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://home.gna.org/oomadness/en/soya/history.html
\end_layout

\end_inset

.
\end_layout

\begin_layout Section
The Soya project objectives and the Soya spirit
\end_layout

\begin_layout Standard
Here are the spirit that Soya follows (or 
\emph on
should
\emph default
 follow ;-) ):
\end_layout

\begin_layout Itemize

\series bold
Soya's goal #1 is to allow to develop as rapidly as possible
\series default
 3D games and other 3D apps
\begin_inset Newline newline
\end_inset

(Rationale: Soya targets "amateur" developpers, who code during their limited
 free time! Moreover, rapid development allows to gain a precious time that
 can be re-invested in improving your code or testing your app.
 For game, it leads to a better gameplay)
\end_layout

\begin_layout Itemize

\series bold
Soya's goal #2 is to be as easy as possible to learn
\series default
, in particular for people with no 3D background at all
\begin_inset Newline newline
\end_inset

(Rationale: Soya is not a toy; to be easy to learn is only goal #2 since
 any newbie will, a day, not longer be a newbie)
\end_layout

\begin_layout Itemize

\series bold
Despite its simplicity, Soya never sacrifices performance and speed
\series default

\begin_inset Newline newline
\end_inset

(Rationale: speed is important for 3D game!)
\end_layout

\begin_layout Itemize

\series bold
Soya's API does not necessarily fit to the mathematical, computational or
 technical reality of the 3D
\series default
, e.g.
 Soya API does not require the use of matrices
\begin_inset Newline newline
\end_inset

(Rationale: math are not the natural way to represent 3D object.
 Soya should be useable without an important mathematical background.
 However, Soya provides matrices, mainly for debug purpose)
\end_layout

\begin_layout Itemize

\series bold
Soya relies a lot on Python facilities and modules
\series default
, e.g.
 saving 3D model is done through object serialization.
 As a consequence, Soya won't evolve toward a multi-language 3D engine and
 will stay Python-centred
\begin_inset Newline newline
\end_inset

(Rationale: Python modules ease the Soya development, but also the use of
 Soya, since they are already well-known to Python developers)
\end_layout

\begin_layout Itemize

\series bold
Soya has plenty of dependencies
\series default

\begin_inset Newline newline
\end_inset

(Rationale: any good OS has a package system tools today)
\end_layout

\begin_layout Itemize

\series bold
Soya always assumes by default the most common usecase
\series default

\begin_inset Newline newline
\end_inset

(Rationale: doing so lead to a substencial time gain)
\end_layout

\begin_layout Itemize

\series bold
Soya is an "atypic" 3D engine and relies on a certain number of controversal
 choices
\series default
 that are somehow debatable ; however, most of these choices are deliberate
\begin_inset Newline newline
\end_inset

(Rationale: Soya should be seen as a "research project" aiming at "a new
 way for 3D" ; the objective is not to satisfy anyone, but to be the ideal
 3D engine for a few persons.
 Python does similarly)
\end_layout

\begin_layout Section
Documentation available
\end_layout

\begin_layout Subsection
Docstrings
\end_layout

\begin_layout Standard
About half of Soya objects and functions have docstrings.
 You can use pydoc to read them, or just type 
\emph on
e.g.

\emph default
 
\begin_inset Quotes eld
\end_inset

help(soya.Body)
\begin_inset Quotes erd
\end_inset

 in a Python interpreter.
 You can also browse the doc online at 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://home.gna.org/oomadness/en/soya/pydoc.html
\end_layout

\end_inset

.
\end_layout

\begin_layout Subsection
Tutorials
\end_layout

\begin_layout Standard
The Soya tutorial pack includes many tutorials, demos and examples.
\end_layout

\begin_layout Subsection
About this doc
\end_layout

\begin_layout Standard
The (yet-in)complete guide to Soya 3D, also known as 
\begin_inset Quotes eld
\end_inset

the yet-in
\begin_inset Quotes erd
\end_inset

, is still under writing.
\end_layout

\begin_layout Section
Getting help
\end_layout

\begin_layout Standard
You may ask for help either on the Soya's mailing list (soya-user@gna.org,
 suscribe from 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://mail.gna.org/listinfo/soya-user
\end_layout

\end_inset

) or the #soya IRC channel on FreeNode.
 Please check if you cannot find the reply to your question in the documentation
 listed above, though.
\end_layout

\begin_layout Chapter
Soya's basics
\end_layout

\begin_layout Section
Initializing Soya
\end_layout

\begin_layout Standard
Initializing Soya is done in three steps, corresponding to these three lines:
\end_layout

\begin_layout LyX-Code
import soya
\end_layout

\begin_layout LyX-Code
soya.path.append("/your/data/path")
\end_layout

\begin_layout LyX-Code
soya.init("My 3D app", sound = 1)
\end_layout

\begin_layout Enumerate
Importing module.
 Soya has several Python sub-packages, but most of the basic stuff is directly
 in the soya module.
\end_layout

\begin_layout Enumerate
Setting data path.
 The data directory (
\family typewriter
/your/data/path
\family default
 above) is referred as <data>/ in this documentation; it is expected to
 contain several subdirectories (see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "cha:Managing-data"

\end_inset

).
\end_layout

\begin_deeper
\begin_layout Description
Hint: if your data are in the 
\begin_inset Quotes eld
\end_inset

data
\begin_inset Quotes erd
\end_inset

 directory located in the same directory than your script, a common trick
 for Python script is:
\end_layout

\begin_layout LyX-Code
soya.path.append(os.path.join(os.path.dirname(sys.argv[0]), "data")) 
\end_layout

\begin_layout Standard
and for Python module:
\end_layout

\begin_layout LyX-Code
soya.path.append(os.path.basename(__file__, "data"))
\end_layout

\end_deeper
\begin_layout Enumerate
Creating and showing the 3D display.
 
\family typewriter
soya.init
\family default
 can take the following arguments (all being optional):
\end_layout

\begin_deeper
\begin_layout Description
title is the title of the window (windowed mode only, defaults to 
\begin_inset Quotes eld
\end_inset

Soya 3D
\begin_inset Quotes erd
\end_inset

).
\end_layout

\begin_layout Description
width,
\begin_inset space ~
\end_inset

height the dimensions of the 3D screen (default to 640, 480).
\end_layout

\begin_layout Description
fullscreen is true for fullscreen and false for windowed mode (defaults
 to false).
\end_layout

\begin_layout Description
resizeable is true for a resizeable window (windowed mode only, defaults
 to true).
\end_layout

\begin_layout Description
create_surface is true for creating an OpenGL surface through SDL, and false
 for using whatever OpenGL that is currently active (in this case it is
 up to you to initialize OpenGL, 
\emph on
e.g.

\emph default
 with PyGame, see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:PyGame"

\end_inset

; it defaults to true)
\end_layout

\begin_layout Description
sound is true to initialize 3D sound support (default to false for backward
 compatibility).
 There are other sound-related arguments, which are discussed in section
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Sound-related-init-parameters"

\end_inset

.
\end_layout

\end_deeper
\begin_layout Standard
You can use soya.set_video(width, height, fullscreen, resizable) to change
 some of these parameters after initialization.
\end_layout

\begin_layout Standard
The rest of this documentation assume that you have initialized Soya correctly.
 It may also assume that you have imported some common modules (os, sys,...),
 well, you are probably enough intelligent to understand that ;-).
\end_layout

\begin_layout Section
Basic classes
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename uml1.eps
	width 80col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "cap:Soya's-basic-classes"

\end_inset

Soya's basic classes (UML schema)
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The UML schema of figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "cap:Soya's-basic-classes"

\end_inset

 shows Soya's basic classes:
\end_layout

\begin_layout Description
MainLoop is in charge of managing and regulating time (see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Time-management"

\end_inset

).
\end_layout

\begin_layout Description
CoordSyst is the base class for all 3D objects.
 It defines a coordinate system, 
\emph on
i.e.

\emph default
 it has a 3D position, orientation and size.
\end_layout

\begin_layout Description
Light is a light.
\end_layout

\begin_layout Description
Camera is the 
\begin_inset Quotes eld
\end_inset

eye
\begin_inset Quotes erd
\end_inset

 from which the 3D scene is viewed.
 It also acts as the 
\begin_inset Quotes eld
\end_inset

ear
\begin_inset Quotes erd
\end_inset

, for 3D sound.
\end_layout

\begin_layout Description
Model (sometimes called 
\begin_inset Quotes eld
\end_inset

Mesh
\begin_inset Quotes erd
\end_inset

 in other 3D engines) is a 3D model.
 Model is actually an 
\begin_inset Quotes eld
\end_inset

abstract
\begin_inset Quotes erd
\end_inset

 class, and Soya provides several Model subclasses (SimpleModel, AnimatedModel,...).
 Models are created either by exporting them from 3D modelers (see chapter
 
\begin_inset CommandInset ref
LatexCommand ref
reference "cha:Blender-for-Soya"

\end_inset

) or by creating a World, putting Faces in the World and then 
\begin_inset Quotes eld
\end_inset

compiling
\begin_inset Quotes erd
\end_inset

 the World into a Model (see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "cha:Modeling"

\end_inset

).
\end_layout

\begin_layout Description
Material defines the attributes of a surface, 
\emph on
e.g.

\emph default
 color or texture.
\end_layout

\begin_layout Description
Image is a 2D image.
 It is used in particular for textures.
 Images are usually created using a 2D painting program like The Gimp.
\end_layout

\begin_layout Description
Body (sometimes called 
\begin_inset Quotes eld
\end_inset

Entity
\begin_inset Quotes erd
\end_inset

 in other 3D engines, or 
\begin_inset Quotes eld
\end_inset

Object
\begin_inset Quotes erd
\end_inset

 in Blender) displays a Model at a specific 3D position.
 Model cannot be displayed without 
\begin_inset Quotes eld
\end_inset

emBodying
\begin_inset Quotes erd
\end_inset

 them; it allows to display the same Model at several location (
\emph on
e.g.

\emph default
 two identical houses in a town), by creating two Bodies with the same Model.
\end_layout

\begin_layout Description
World (sometimes called 
\begin_inset Quotes eld
\end_inset

Node
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

Group
\begin_inset Quotes erd
\end_inset

 in other 3D engines) acts as a grouping container.
 A World can contain other nested CoordSysts, including other Worlds.
 When a World is moved, all the CoordSysts it contains are moved too.
 As a consequence, Soya scenegraph is a tree structure, the root being a
 World, usually called 
\begin_inset Quotes eld
\end_inset

scene
\begin_inset Quotes erd
\end_inset

.
 World also inherit from Body, and thus can display a Model.
\end_layout

\begin_layout Standard
Most of the more advanced Soya classes derive from these.
\end_layout

\begin_layout Description
Hint: some people find odd that World inherits from Body...
 but this will make sense in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Attaching-objects-to-bones"

\end_inset

, please wait ;-)
\end_layout

\begin_layout Description
History: For a long time, Soya has used 
\begin_inset Quotes eld
\end_inset

folkloric
\begin_inset Quotes erd
\end_inset

 names.
 These names are still available as aliases, for backward compatibility
 (and archeologists :-).
 They are: Idler for MainLoop, Shape for Model, Volume for Body, Land for
 Terrain (see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Terrain"

\end_inset

).
\end_layout

\begin_layout Section
Your first 3D scene with Soya
\end_layout

\begin_layout Standard
We are going to create a basic 3D scene that just displays a Model.
 First, we need to create the root of the tree, a World we call 
\begin_inset Quotes eld
\end_inset

scene
\begin_inset Quotes erd
\end_inset

 (Worlds with no parent are usually called 
\begin_inset Quotes eld
\end_inset

scene
\begin_inset Quotes erd
\end_inset

).
 Then we load the Model and create a Body that displays it.
 Then we create a Light and a Camera, and we set the Camera as the 
\emph on
root widget
\emph default
, 
\emph on
i.e.

\emph default
 the object Soya renders (see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "cha:Widget-systems"

\end_inset

).
 Finally, we create the MainLoop and start looping.
 The scene tree is the following:
\end_layout

\begin_layout LyX-Code
World scene
\end_layout

\begin_layout LyX-Code
  |
\end_layout

\begin_layout LyX-Code
  +-- Body sword, displaying the sword Model
\end_layout

\begin_layout LyX-Code
  |
\end_layout

\begin_layout LyX-Code
  +-- Light light
\end_layout

\begin_layout LyX-Code
  |
\end_layout

\begin_layout LyX-Code
  +-- Camera camera
\end_layout

\begin_layout Standard
And here is the code (see tutorial basic-1.py):
\end_layout

\begin_layout LyX-Code
scene = soya.World()
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
sword_model = soya.Model.get("sword")
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
sword = soya.Body(scene, sword_model)
\end_layout

\begin_layout LyX-Code
sword.x = 1.0
\end_layout

\begin_layout LyX-Code
sword.rotate_y(90.0)
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
light = soya.Light(scene)
\end_layout

\begin_layout LyX-Code
light.set_xyz(0.5, 0.0, 2.0)
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
camera = soya.Camera(scene)
\end_layout

\begin_layout LyX-Code
camera.z = 2.0
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
soya.set_root_widget(camera)
\end_layout

\begin_layout LyX-Code
soya.MainLoop(scene).main_loop()
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename /home/jiba/src/soya/tutorial/results/basic-1.jpeg
	lyxscale 50
	width 20col%

\end_inset


\end_layout

\begin_layout Standard
In the next sections, we are going to see in more details the various objects
 used in this first example.
\end_layout

\begin_layout Section
Loading Images, Materials and Models
\end_layout

\begin_layout Standard
Models are usually not created but loaded from a file (if you want to create
 Models directly from Soya, see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "cha:Modeling"

\end_inset

).
 To load a Model, do:
\end_layout

\begin_layout LyX-Code
your_model = soya.Model.get("your_model_filename")
\end_layout

\begin_layout Standard
and Soya loads the <data>/models/your_model_filename.data file.
 The Materials and Images used by the Model are also automatically loaded,
 from the <data>/materials/ and <data>/images/ directories.
 Image files are PNG or JPEG, and Material and Model files are raw serialized
 Python objects, a format that only Soya can read or write.
\end_layout

\begin_layout Standard
However, Soya can import Blender models automatically.
 If a <data>/blender/your_model_filename.blend file exist, and the Model
 file doesn't exist (or is older), Soya loads the Blender files and caches
 the resulting Model in <data>/models/your_model_filename.data.
 This feature is known as 
\begin_inset Quotes eld
\end_inset

auto-exporters
\begin_inset Quotes erd
\end_inset

; for more details on auto-exporters or data management, see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "cha:Managing-data"

\end_inset

, and for more details on using Blender with Soya, see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "cha:Blender-for-Soya"

\end_inset

.
\end_layout

\begin_layout Standard
If you call Model.get several times with the same filename argument, Soya
 doesn't load the Model twice but returns the same (cached) object.
 This is nice since Models are immutable.
\end_layout

\begin_layout Section
Displaying Models with Bodies
\end_layout

\begin_layout Standard
Models cannot be directly displayed on the screen; you need to put them
 onto a Body.
 You can create a Body as following:
\end_layout

\begin_layout LyX-Code
your_body = soya.Body(parent, model)
\end_layout

\begin_layout Standard
where parent is the World in which the Body is added, and model is the Model
 to display (both default to None).
 For all constructors of 3D objects (derivating from CoordSyst), the first
 argument is the parent World.
 It is possible to reparent a CoordSyst, and the current parent World can
 be accessed through the parent attribute.
\end_layout

\begin_layout Standard
The Model displayed by a Body can be get or set through the model attribute:
\end_layout

\begin_layout LyX-Code
your_body.model = soya.Model.get("your_second_model_filename")
\end_layout

\begin_layout Standard
Bodies allow to display several times the same Model.
 For example, to display two swords instead of one, you can use the following
 scene tree:
\end_layout

\begin_layout LyX-Code
World scene
\end_layout

\begin_layout LyX-Code
  |
\end_layout

\begin_layout LyX-Code
  +-- Body sword1, displaying the sword Model
\end_layout

\begin_layout LyX-Code
  |
\end_layout

\begin_layout LyX-Code
  +-- Body sword2, displaying the sword Model
\end_layout

\begin_layout LyX-Code
  |
\end_layout

\begin_layout LyX-Code
  +-- Light light
\end_layout

\begin_layout LyX-Code
  |
\end_layout

\begin_layout LyX-Code
  +-- Camera camera
\end_layout

\begin_layout Standard
And here is the code (set_xyz and rotate_y are used to position the two
 Bodies and will be seen in the next section; the code snipplet doesn't
 include the scene, Light, Camera and MainLoop, which are identical to the
 
\begin_inset Quotes eld
\end_inset

first scene
\begin_inset Quotes erd
\end_inset

 example):
\end_layout

\begin_layout LyX-Code
sword_model = soya.Model.get("sword")
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
sword1 = soya.Body(scene, sword_model)
\end_layout

\begin_layout LyX-Code
sword1.set_xyz(1.0, 0.5, 0.0)
\end_layout

\begin_layout LyX-Code
sword1.rotate_y(90.0)
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
sword2 = soya.Body(scene, sword_model)
\end_layout

\begin_layout LyX-Code
sword2.set_xyz(1.0, -0.5, 0.0)
\end_layout

\begin_layout LyX-Code
sword2.rotate_y(90.0)
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename /home/jiba/src/soya/tutorial/results/basic-1-two-swords.jpeg
	lyxscale 50
	width 20col%

\end_inset


\end_layout

\begin_layout Section
Moving, rotating and scaling CoordSysts
\end_layout

\begin_layout Standard
Moving, rotating and scaling methods belong to the CoordSyst class, and
 are inherited to all CoordSyst children classes.
 This section shows the most common Moving, rotating and scaling methods;
 for a complete reference see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:CoordSyst"

\end_inset

.
\end_layout

\begin_layout Subsection
Soya's conventions
\end_layout

\begin_layout Itemize
When relevant, Soya always considers X as the right-hand direction, Y as
 the up direction, Z as the backward direction, and thus -Z as the frontward
 direction (Soya uses -Z for front in order to keep all coordinate systems
 right-handed, just to avoid an internal mathematical nighmare).
\end_layout

\begin_layout Itemize
All angles are expressed in degrees.
\end_layout

\begin_layout Itemize
In Soya, a 3D position is defined by three X, Y, Z values 
\series bold
and
\series default
 the CoordSyst in which they are expressed.
 X, Y, Z alone are not enough to make a 3D position.
\end_layout

\begin_layout Itemize
By default, a distance of 1.0 is considered as roughly one meter, although
 you may choose a different convention.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Moving"

\end_inset

Moving
\end_layout

\begin_layout Standard
The most basic method for moving an object is to set his x, y or z attributes.
 set_xyz sets x, y and z in a single call.
\end_layout

\begin_layout LyX-Code
coord_syst.x = 1.0
\end_layout

\begin_layout LyX-Code
coord_syst.set_xyz(1.0, 2.0, 3.0) # Set x to 1.0, y to 2.0 and z to 3.0
\end_layout

\begin_layout Standard
When using methods that take object arguments (and not raw X, Y and Z values),
 Soya automatically performs coodinate system conversion if needed.
 To move a CoordSyst at the same position than another one, use the move
 method:
\end_layout

\begin_layout LyX-Code
coord_syst.move(coord_syst2)
\end_layout

\begin_layout Standard
Translation can be done by the add_vector method (which is aliased to the
 += operator).
 The vector constructor accepts the parent (any CoordSyst), and then the
 X, Y and Z coordinates.
 For example, to move coord_syst one step on its right:
\end_layout

\begin_layout LyX-Code
coord_syst.add_vector(soya.Vector(coord_syst, 1.0, 0.0, 0.0))
\end_layout

\begin_layout Standard
And to move coord_syst one step on the scene's right:
\end_layout

\begin_layout LyX-Code
coord_syst.add_vector(soya.Vector(scene, 1.0, 0.0, 0.0))
\end_layout

\begin_layout Standard
Finally, add_mul_vector(proportion, vector) is a faster equivalent to add_vector
(proportion * vector), which often used in advance_time.
\end_layout

\begin_layout Subsection
Rotating
\end_layout

\begin_layout Standard
rotate_x(angle) (aliased to rotate_vertical), rotate_y(angle) (aliased to
 rotate_lateral) and rotate_z(angle) (aliased to rotate_incline) perform
 rotation around the CoordSyst's 
\series bold
parent
\series default
 X, Y and Z axes.
 The turn_* methods (turn_x, turn_lateral,...) are identical but they refer
 to the CoordSyst 
\series bold
local
\series default
 X, Y and Z axes, and not its parent ones.
 All angles are in degrees.
\end_layout

\begin_layout LyX-Code
coord_syst.rotate_y(90.0)
\end_layout

\begin_layout Standard
rotate_axis(angle, axis) performs a rotation around an axis defined by the
 origin (0, 0, 0) and the Vector axis.
\end_layout

\begin_layout LyX-Code
coord_syst.rotate_axis(90.0, soya.Vector(scene, 0.0, 1.0, 0.0))
\end_layout

\begin_layout Standard
rotate(angle, a, b) performs a rotation around an axis that pass through
 a and b (either CoordSysts or Points).
\end_layout

\begin_layout LyX-Code
coord_syst.rotate(90.0, scene, soya.Point(scene, 0.0, 1.0, 0.0))
\end_layout

\begin_layout Standard
Finally, the very handy look_at(direction) method rotates a CoordSyst so
 as it looks toward direction (either a Vector, a Point or a CoordSyst);
 the -Z direction is considered as 
\begin_inset Quotes eld
\end_inset

front
\begin_inset Quotes erd
\end_inset

, and look_at tries to maintain the Y direction as up (which is usually
 what one expects):
\end_layout

\begin_layout LyX-Code
arrow.look_at(enemy)
\end_layout

\begin_layout Subsection
Scaling
\end_layout

\begin_layout Standard
To scale a CoordSyst, use the scale method, which accepts three arguments,
 the X, Y and Z scale factors.
 Negative values can be used for mirroring.
\end_layout

\begin_layout LyX-Code
coord_syst.scale(0.5, 0.5, 0.5)
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename /home/jiba/src/soya/tutorial/results/basic-1-scaled.jpeg
	lyxscale 50
	width 20col%

\end_inset


\end_layout

\begin_layout Standard
The scale_x, scale_y and scale_z attributes are the current X, Y and Z scale
 factors (
\emph on
e.g.

\emph default
 0.5 in the previous example).
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sub:Time-management"

\end_inset

Time management and the MainLoop
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename time.eps
	lyxscale 50
	width 40col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "cap:Time"

\end_inset

Time division in Soya
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In Soya, the time is divided in 
\emph on
round
\emph default
, each round having the same theorical duration (by default, 30 milliseconds).
 
\begin_inset Quotes eld
\end_inset

Theorical duration
\begin_inset Quotes erd
\end_inset

 means that a given round may be shorter or longer, but the mean duration
 is constant.
 The following three methods of CoordSysts are automatically called as time
 goes on (see figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "cap:Time"

\end_inset

):
\end_layout

\begin_layout Description
begin_round() is called at the beginning of each round, for each CoordSyst.
 begin_round may 
\emph on
e.g.

\emph default
 perform collision detection, read events, determine the CoordSyst next
 move, and compute a speed vector.
\end_layout

\begin_layout Description
advance_time(proportion) is called in proportion as time goes on; the proportion
 agument is the proportion of the round that has passed (1.0 for a complete
 round, 0.5 for halt a round,...
 during a round, the sum of the proportion arguments in the different calls
 to advance_time, is always 1.0).
 advance_time is in charge of 
\emph on
e.g.

\emph default
 applying the speed vector computed by begin_round.
\end_layout

\begin_layout Description
end_round() is called at the end of the round.
 It is rarely used.
\end_layout

\begin_layout Standard
The 3D rendering may occurs at any instant, possibly in the middle of a
 round, as if it was simultaneous (although Soya uses a single thread).
 This time managing system yields a very smooth and soft animation: 
\emph on
e.g.

\emph default
 if two third of a round has passed, two third of the movement will be done
 when the rendering occurs.
\end_layout

\begin_layout Standard
MainLoop is responsible for cutting the time as exposed above, and it does
 a good job.
 The MainLoop object constructor accpets one (or more) World arguments,
 which are the root scenes.
 Then the MainLoop is started by calling MainLoop.main_loop, and it loops
 until you call MainLoop.stop(arg); arg will be the value returned by MainLoop.mai
n_loop (see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:MainLoop"

\end_inset

 for more details on MainLoop).
\end_layout

\begin_layout Standard
For example, here is a subclass of Body that rotates continuously over the
 Y axis (see tutorial basic-2.py):
\end_layout

\begin_layout LyX-Code
class RotatingBody(soya.Body):
\end_layout

\begin_layout LyX-Code
    def advance_time(self, proportion):
\end_layout

\begin_layout LyX-Code
        soya.Body.advance_time(self, proportion)
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
        self.rotate_y(proportion * 5.0)
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename /home/jiba/src/soya/tutorial/results/basic-2_0.jpeg
	lyxscale 50
	width 15text%

\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Graphics
	filename /home/jiba/src/soya/tutorial/results/basic-2_1.jpeg
	lyxscale 50
	width 15text%

\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Graphics
	filename /home/jiba/src/soya/tutorial/results/basic-2_2.jpeg
	lyxscale 50
	width 15text%

\end_inset


\end_layout

\begin_layout Standard
As the rotation is always the same, we don't need a begin_round.
 The advance_time method calls the super implementation, and then rotates
 the object.
 Notice how the rotation angle takes into account the proportion argument
 (
\emph on
e.g.

\emph default
 if half of the round has passed, half of the rotation is performed).
\end_layout

\begin_layout Standard
A more complex example is a randomly moving Body (see tutorial basic-3.py):
\end_layout

\begin_layout LyX-Code
class RandomlyMovingBody(soya.Body):
\end_layout

\begin_layout LyX-Code
    def __init__(self, parent = None, model = None):
\end_layout

\begin_layout LyX-Code
        soya.Body.__init__(self, parent, model)
\end_layout

\begin_layout LyX-Code
        self.rotation_speed = 0.0
\end_layout

\begin_layout LyX-Code
        self.speed = soya.Vector(self, 0.0, 0.0, -0.2)
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
    def begin_round(self):
\end_layout

\begin_layout LyX-Code
        soya.Body.begin_round(self)
\end_layout

\begin_layout LyX-Code
        self.rotation_speed = random.uniform(-25.0, 25.0)
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
    def advance_time(self, proportion):
\end_layout

\begin_layout LyX-Code
        soya.Body.advance_time(self, proportion)
\end_layout

\begin_layout LyX-Code
        self.rotate_y(proportion * self.rotation_speed)
\end_layout

\begin_layout LyX-Code
        self.add_mul_vector(proportion, self.speed)
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename /home/jiba/src/soya/tutorial/results/basic-3_0.jpeg
	lyxscale 50
	width 15text%

\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Graphics
	filename /home/jiba/src/soya/tutorial/results/basic-3_1.jpeg
	lyxscale 50
	width 15text%

\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Graphics
	filename /home/jiba/src/soya/tutorial/results/basic-3_2.jpeg
	lyxscale 50
	width 15text%

\end_inset


\end_layout

\begin_layout Standard
This RandomlyMovingBody has too additional attributes: the rotation speed
 (in degrees, around the Y axis), and the speed vector.
 The speed vector is expressed in the RandomlyMovingBody coordinate system
 itself (remind that the -Z direction is the front).
\end_layout

\begin_layout Standard
begin_round computes a new random rotation speed (from -25.0 to 25.0); the
 speed vector doesn't need update since it is expressed in the RandomlyMovingBod
y coordinate system (
\emph on
i.e.

\emph default
 rotating or moving the RandomlyMovingBody will rotate or move the vector).
 advance_time applies the rotation and speed vector; self.add_mul_vector(propotio
n, self.speed) is equivalent to self.add_vector(proportion * self.speed), but
 faster.
\end_layout

\begin_layout Section
Grouping objects in Worlds
\end_layout

\begin_layout Standard
A World is a Body that can also have children CoordSysts nested in it (including
 other Worlds).
 When the World is moved, rotated or scaled, all the children CoordSysts
 are moved, rotated or scaled.
 For example, we can use nested World for representing celestial objects
 like suns/stars, planets and satellites.
 In this example, CelestialObject inherits from World, and continuously
 rotates (similarly to the RotatingBody example we've seen previously),
 but it can also contain other CoordSyst.
 As the CelestialObject rotates, the CoordSysts it contains are moved too.
\end_layout

\begin_layout Standard
For three CelestialObjects, the sun, the earth and the moon, the scene tree
 is:
\end_layout

\begin_layout LyX-Code
World scene
\end_layout

\begin_layout LyX-Code
  |
\end_layout

\begin_layout LyX-Code
  +-- CelestialObject sun, displaying the sun Model
\end_layout

\begin_layout LyX-Code
  |     |
\end_layout

\begin_layout LyX-Code
  |     +-- CelestialObject earth, displaying the earth Model
\end_layout

\begin_layout LyX-Code
  |           |
\end_layout

\begin_layout LyX-Code
  |           +-- CelestialObject moon, displaying the moon Model
\end_layout

\begin_layout LyX-Code
  |
\end_layout

\begin_layout LyX-Code
  +-- Light light
\end_layout

\begin_layout LyX-Code
  |
\end_layout

\begin_layout LyX-Code
  +-- Camera camera
\end_layout

\begin_layout Standard
And here is the code (see tutorial nested-worlds-1.py):
\end_layout

\begin_layout LyX-Code
class CelestialObject(soya.World):
\end_layout

\begin_layout LyX-Code
    def advance_time(self, proportion):
\end_layout

\begin_layout LyX-Code
        soya.World.advance_time(self, proportion)
\end_layout

\begin_layout LyX-Code
        self.rotate_y(proportion * 2.0)
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
sun   = CelestialObject(scene, soya.Model.get("sun"))
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
earth = CelestialObject(sun  , soya.Model.get("earth"))
\end_layout

\begin_layout LyX-Code
earth.x = 2.0
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
moon  = CelestialObject(earth, soya.Model.get("moon"))
\end_layout

\begin_layout LyX-Code
moon.x = 0.5
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
camera = soya.Camera(scene)
\end_layout

\begin_layout LyX-Code
camera.y = 4.0
\end_layout

\begin_layout LyX-Code
camera.look_at(soya.Vector(scene, 0.0, -1.0, 0.0)) # Looks downward
\end_layout

\begin_layout LyX-Code
soya.set_root_widget(camera)
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename /home/jiba/src/soya/tutorial/results/nested-world-1.jpeg
	lyxscale 50
	width 15text%

\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Graphics
	filename /home/jiba/src/soya/tutorial/results/nested-world-1_1.jpeg
	lyxscale 50
	width 15text%

\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Graphics
	filename /home/jiba/src/soya/tutorial/results/nested-world-1_2.jpeg
	lyxscale 50
	width 15text%

\end_inset


\end_layout

\begin_layout Standard
Notice that the moon position (X = 0.5) is relative to its parent coordinate
 system (the earth), and not to the scene.
\end_layout

\begin_layout Standard
The easiest way to add a CoordSyst into a World is to pass the World as
 the first argument to the CoordSyst's constructor (as done previously):
\end_layout

\begin_layout LyX-Code
earth = CelestialObject(sun, soya.Model.get("earth"))
\end_layout

\begin_layout Standard
However, it is also possible to use the add method:
\end_layout

\begin_layout LyX-Code
earth = CelestialObject(None, soya.Model.get("earth"))
\end_layout

\begin_layout LyX-Code
sun.add(earth)
\end_layout

\begin_layout Standard
Then, CoordSysts can be removed by the remove method:
\end_layout

\begin_layout LyX-Code
sun.remove(earth)
\end_layout

\begin_layout Standard
The CoordSyst.parent attribute is the World currently containing the CoordSyst;
 this attribute is read-only (use remove and add to reparent a CoordSyst):
\end_layout

\begin_layout LyX-Code
if moon.parent is earth: print "it's OK"
\end_layout

\begin_layout Standard
The World.children attribute is a list containing all the children CoordSysts
 (you 
\series bold
should not modify this list
\series default
 directly, use add and remove!).
\end_layout

\begin_layout LyX-Code
print earth in sun.children # => true
\end_layout

\begin_layout LyX-Code
print moon  in sun.children # => false
\end_layout

\begin_layout Standard
Worlds can also be iterated as list:
\end_layout

\begin_layout LyX-Code
for coord_syst in sun:
\end_layout

\begin_layout LyX-Code
    print "the sun contains", coord_syst
\end_layout

\begin_layout Standard
Soya also provide handy recursive methods.
 World.recursive() returns all the nested CoordSysts, recursively, and CoordSyst.i
s_inside(World) can be used to check recursively for inclusion:
\end_layout

\begin_layout LyX-Code
print earth.is_inside(sun) # => true
\end_layout

\begin_layout LyX-Code
print moon .is_inside(sun) # => true
\end_layout

\begin_layout Standard
World also has various methods for searching children, using predicate or
 the CoordSyst.name attribute.
 For example, to search (recursively) the scene for all Bodies that display
 the moon Model:
\end_layout

\begin_layout LyX-Code
scene.search_all(lambda coord_syst: isinstance(coord_syst, soya.Body)
\end_layout

\begin_layout LyX-Code
                                and coord_syst.model is soya.Model.get("moon"))
\end_layout

\begin_layout Standard
Finally, Worlds can be turned into Model using the to_model() method.
 Models are faster than Worlds, but they are immutable (this will be discussed
 in detail in chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "cha:Modeling"

\end_inset

).
\end_layout

\begin_layout Section
Math computation: Point
\end_layout

\begin_layout Standard
As stated above, Soya defines a 3D position by three X, Y, Z values 
\series bold
and
\series default
 the CoordSyst in which they are expressed.
 Soya provides Point objects for encapsulating the X, Y, Z coordinates and
 the CoordSyst.
 Using Points, Soya automatically converts the X, Y, Z coordinates from
 a CoordSyst to another when needed.
\end_layout

\begin_layout Standard
A Point represent a 3D position.
 To create a Point, use the constructor:
\end_layout

\begin_layout LyX-Code
soya.Point(CoordSyst, x, y, z) -> Point
\end_layout

\begin_layout Standard
For example, this creates the Point located at X=1.0, Y=0.0, Z=0.0 in the earth
 (using the solar system example previously seen).
\end_layout

\begin_layout LyX-Code
soya.Point(earth, 1.0, 0.0, 0.0)
\end_layout

\begin_layout Standard
The constructors are very similar to the CoordSyst's (and subclasses') ones,
 the first argument being the parent object.
 However, Point can be created in any CoordSyst, and not only World, and
 they are not considered as 
\begin_inset Quotes eld
\end_inset

3D objects
\begin_inset Quotes erd
\end_inset

.
 For example, they are not listed in World.children:
\end_layout

\begin_layout LyX-Code
world = soya.World()
\end_layout

\begin_layout LyX-Code
point = soya.Point(world, 1.0, 0.0, 0.0)
\end_layout

\begin_layout LyX-Code
print world.children # => [] (empty list)
\end_layout

\begin_layout Standard
The distance between two CoordSysts or Points can be computed by the distance_to
 method:
\end_layout

\begin_layout LyX-Code
print moon.distance_to(sun) # Notice that moon and sun are not defined in
 the same CoordSyst
\end_layout

\begin_layout Standard
Point provides the same moving methods than CoordSyst (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Moving"

\end_inset

).
\end_layout

\begin_layout Standard
The parent attribute of a Point can be used to get or set the CoordSyst
 in which the X, Y, Z values are defined.
 If parent is set, X, Y, Z are left unmodifed; if you want to perform a
 manual coordinate system conversion, use the convert_to method:
\end_layout

\begin_layout LyX-Code
moon_center = soya.Point(moon, 0.0, 0.0, 0.0)
\end_layout

\begin_layout LyX-Code
moon_center.convert_to(sun)
\end_layout

\begin_layout LyX-Code
print "In the sun coordinate system, the center of the moon is", moon_center
\end_layout

\begin_layout LyX-Code
# => In the sun coordinate system, the center of the moon is <Point 1.98,
 0.0, 0.5
\end_layout

\begin_layout LyX-Code
#    in <CelestialObject, model=<SimpleModel sun>>>
\end_layout

\begin_layout Standard
The % operator performs a similar conversion, but not in place (
\emph on
i.e.

\emph default
 without modifying the object) : obj % coord_syst means obj expressed in
 the coord_syst coordinate system, 
\emph on
i.e.

\emph default
 either obj itself if obj.parent is already coord_syst, or a newly created
 Point.
 The following is thus equivalent to the previous example:
\end_layout

\begin_layout LyX-Code
print "In the sun coordinate system, the center of the moon is", moon %
 sun
\end_layout

\begin_layout Section
Math computation: Vector
\end_layout

\begin_layout Standard
A Vector represent a 3D vector; it can be used for translation or angular
 computation.
\end_layout

\begin_layout Description
Hint: Vector inherits from Point, only to avoid dupplicating some internal
 code, although this inheritance relation is mathematically absurd ;-).
\end_layout

\begin_layout Standard
To create a Vector, you can use either the constructor, or the vector_to
 method, which create a vector from a beginning position and an end position
 (both being CoordSyst or Point):
\end_layout

\begin_layout LyX-Code
soya.Vector(CoordSyst, x, y, z) -> Vector
\end_layout

\begin_layout LyX-Code
CoordSyst_or_Point.vector_to(CoordSyst_or_Point) -> Vector # Aliased to the
 >> operator
\end_layout

\begin_layout Standard
For example, to move character one unit forward, we first create the speed
 vector, which is Z=-1 in the character CoordSyst (-Z being the front direction
 in Soya convention), and then we use add_vector:
\end_layout

\begin_layout LyX-Code
speed = soya.Vector(character, 0.0, 0.0, -1.0)
\end_layout

\begin_layout LyX-Code
character.add_vector(speed)
\end_layout

\begin_layout Standard
Like Point, Vector are not considered as 
\begin_inset Quotes eld
\end_inset

3D objects
\begin_inset Quotes erd
\end_inset

 and, in particular, they are not listed in World.children.
 Vector provides the same moving methods than CoordSyst (see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Moving"

\end_inset

).
\end_layout

\begin_layout Standard
The length method returns the length of the Vector; you can use the set_length(n
ew_length) method to scale the Vector to the given length.
 The following example moves the moon 1.0 unit toward the sun (remind that
 add_vector perform a translation):
\end_layout

\begin_layout LyX-Code
vector = moon.vector_to(sun)
\end_layout

\begin_layout LyX-Code
vector.set_length(1.0)
\end_layout

\begin_layout LyX-Code
moon.add_vector(vector)
\end_layout

\begin_layout Standard
Vector provides also some methods for dealing with rotations and angles.
 The angle_to method returns the angle between two Vectors; the following
 example computes the angle between the sun and the moon, at the earth position:
\end_layout

\begin_layout LyX-Code
print (earth >> sun).angle_to(earth >> moon) # >> is the same than vector_to
\end_layout

\begin_layout Standard
For Vector, add_vector performs a vectorial addition (since translating
 a vector doesn't change it and is thus useless).
 The dot_product and cross_product methods compute what you can expect from
 them.
\end_layout

\begin_layout Description
Hints: Creating many Points or Vectors is time-consuming, since they are
 Python object.
 You can increase the performance by re-using the same objects instead of
 creating new ones.
\end_layout

\begin_layout Section
The eye: Camera
\end_layout

\begin_layout Section
Enlight your scene: Light
\end_layout

\begin_layout Standard
In Soya, colors are always four-value tupples of the form (red, green, blue,
 alpha).
 Each component ranges from 0.0 to 1.0.
 The alpha component is the transparency (0.0 means fully transparent, 1.0
 means fully opaque).
 The alpha component is always mandatory, even if it is not used (
\emph on
e.g.

\emph default
 for Light colors).
\end_layout

\begin_layout Section
Basic object reference
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:MainLoop"

\end_inset

MainLoop
\end_layout

\begin_layout Standard
MainLoop is in charge of managing and regulating time (see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Time-management"

\end_inset

).
 The current running MainLoop can be accessed as soya.MAIN_LOOP.
\end_layout

\begin_layout Standard
Constructor:
\end_layout

\begin_layout Description
MainLoop(scene1,
\begin_inset space ~
\end_inset

scene2,...)
\begin_inset space ~
\end_inset

->
\begin_inset space ~
\end_inset

MainLoop
\end_layout

\begin_layout Standard
Noticeable attributes are:
\end_layout

\begin_layout Description
fps the frame rate (number of frame per second, a usefull speed indicator;
 read only).
\end_layout

\begin_layout Description
running true if the MainLoop is running (read only).
\end_layout

\begin_layout Description
next_round_tasks a list of callable (taking no arg) that will be called
 once, just after the beginning of the next round.
 You can add callable if you want.
\end_layout

\begin_layout Description
scenes the Worlds associated to the MainLoop.
 These Worlds begin_round, advance_time and end_round will be called regularly
 (as well as the ones of all objects inside the Worlds, of course).
\end_layout

\begin_layout Description
round_duration the duration of a round, in second.
 Round is the time unit.
 It is granted that 
\series bold
all
\series default
 rounds correspond to a period lasting round_durection (though the different
 period may not be regularly spread over time).
 (default to 0.030, 
\emph on
i.e.

\emph default
 30 milliseconds).
\end_layout

\begin_layout Description
min_frame_duration: minimum duration for a frame.
 This attribute can be used to limit the maximum FPS to save CPU time; 
\emph on
e.g.

\emph default
 having FPS higher than 30-40 is usually useless.
 Default is 0.020, which limits FPS to 40 in theory and to about 33 in practice
 (I don't know why there is a difference between theory and practice !).
\end_layout

\begin_layout Standard
Noticeable methods are:
\end_layout

\begin_layout Description
main_loop()
\begin_inset space ~
\end_inset

->
\begin_inset space ~
\end_inset

return_value starts the MainLoop.
 This method returns only after MainLoop.stop is called, and it returns the
 argument given to MainLoop.stop.
\end_layout

\begin_layout Description
stop(return_value=None) stops the main loop.
 The stop doesn't occur immediately, but at the end of the next iteration.
 MainLoop.stop causes MainLoop.main_loop to returns; return_value is the (optionna
l) value that MainLoop.main_loop will return.
\end_layout

\begin_layout Description
reset() rester the internal time counter.
 You need to call MainLoop.reset if your program has paused, and you don't
 want the MainLoop to compensate the time loss by accelerating.
 This is usually the case when you put a game in pause mode.
\end_layout

\begin_layout Description
update() calling regularly MainLoop.update is an alternative to MainLoop.start
 (see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:External-GUI-systems"

\end_inset

).
\end_layout

\begin_layout Description
begin_round()
\end_layout

\begin_layout Description
advance_time(proportion)
\end_layout

\begin_layout Description
end_round() default implementation calls all the corresponding methods of
 all scenes in the MainLoop.
\end_layout

\begin_layout Description
render() called when it is time to render; default implementation calls
 soya.render that does the job.
\end_layout

\begin_layout Subsection
Model
\end_layout

\begin_layout Standard
Model is a 3D model (sometimes called 
\begin_inset Quotes eld
\end_inset

Mesh
\begin_inset Quotes erd
\end_inset

 in other 3D engines).
 Model is actually an 
\begin_inset Quotes eld
\end_inset

abstract
\begin_inset Quotes erd
\end_inset

 class, and Soya provides several Model classes (SimpleModel, AnimatedModel,...).
 Models are created either by exporting them from 3D modelers (see chapter
 
\begin_inset CommandInset ref
LatexCommand ref
reference "cha:Blender-for-Soya"

\end_inset

) or by creating a World, putting Faces in the World and then 
\begin_inset Quotes eld
\end_inset

compiling
\begin_inset Quotes erd
\end_inset

 the World into a Model (see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "cha:Modeling"

\end_inset

).
 Models are considered as immutable, as a single model can be shared and
 used by several Body; if you want to modify a Model in your code, you'll
 have to modify the World that has generated it, and then to turn the World
 into a new Model.
\end_layout

\begin_layout Standard
Models are not created by calling the Model constructor directly, they are
 loaded from a file or created from a World, respectively:
\end_layout

\begin_layout Description
Model.get("filename")
\begin_inset space ~
\end_inset

->
\begin_inset space ~
\end_inset

Model (see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "cha:Managing-data"

\end_inset

)
\end_layout

\begin_layout Description
World.to_model()
\begin_inset space ~
\end_inset

->
\begin_inset space ~
\end_inset

Model
\end_layout

\begin_layout Standard
Noticeable attributes are:
\end_layout

\begin_layout Description
filename the name of the file the model was loaded from (without path or
 extension).
\end_layout

\begin_layout Description
materials a tuples of the materials the model uses.
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:CoordSyst"

\end_inset

CoordSyst
\end_layout

\begin_layout Standard
CoordSyst is the base class for all 3D objects.
 It defines a coordinate system, 
\emph on
i.e.

\emph default
 it has a 3D position, orientation and size.
\end_layout

\begin_layout Standard
Constructor is:
\end_layout

\begin_layout Description
CoordSyst(parent=None)
\begin_inset space ~
\end_inset

->
\begin_inset space ~
\end_inset

CoordSyst where parent is the World in which the CoordSyst will be added
 (use None for no addition).
\end_layout

\begin_layout Standard
Noticeable attributes are:
\end_layout

\begin_layout Description
parent the World that contains this CoordSyst (None if no such parent; read-only
, use World.remove and World.add to reparent a CoordSyst).
\end_layout

\begin_layout Description
x,
\begin_inset space ~
\end_inset

y,
\begin_inset space ~
\end_inset

z the X, Y and Z coordinates (defaults to 0.0, 0.0, 0.0).
\end_layout

\begin_layout Description
scale_x,
\begin_inset space ~
\end_inset

scale_y,
\begin_inset space ~
\end_inset

scale_z the X, Y and Z scaling factors.
\end_layout

\begin_layout Description
visible if false, the object is not displayed (defaults to true).
\end_layout

\begin_layout Description
solid if false, the object is not taken into account for collision and raypickin
g (see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "cha:Collision-detection-and-physics"

\end_inset

, defaults to true).
\end_layout

\begin_layout Description
static if true, the object is considered as static (doesn't move), and Soya
 take that into account for optimizing rendering (default to false, may
 be modified automatically due to auto_static, see below).
\end_layout

\begin_layout Description
auto_static if true, Soya automatically determines and sets the static attribute
 (defaults to true).
\end_layout

\begin_layout Description
matrix,
\begin_inset space ~
\end_inset

root_matrix,
\begin_inset space ~
\end_inset

inverted_root_matrix the underlying 4x4 matrix, the root matrix (
\emph on
i.e.

\emph default
 the multiplication of all matrices from scene.matrix up to CoordSyst.matrix),
 and the inverse of the root matrix (for debugging or hacking purpose only).
\end_layout

\begin_layout Description
left_handed true if the CoordSyst is left_handed (read only,
\begin_inset space ~
\end_inset

for debugging or hacking purpose only).
\end_layout

\begin_layout Standard
Noticeable methods are:
\end_layout

\begin_layout Description
get_root()
\begin_inset space ~
\end_inset

->
\begin_inset space ~
\end_inset

World get the root parent of the CoordSyst (the scene).
\end_layout

\begin_layout Description
is_inside(coord_syst) returns true if the CoordSyst is inside coord_syst,
 
\emph on
i.e.

\emph default
 both CoordSysts are the same, or coord_syst is a World that (recursively)
 contains the CoordSyst.
\end_layout

\begin_layout Description
position()
\begin_inset space ~
\end_inset

->
\begin_inset space ~
\end_inset

Point creates a Point in the same parent and at the same place than the
 CoordSyst.
\end_layout

\begin_layout Description
distance_to(position)
\begin_inset space ~
\end_inset

->
\begin_inset space ~
\end_inset

float returns the distance between the CoordSyst and position (another CoordSyst
 or a Point).
\end_layout

\begin_layout Description
vector_to(position)
\begin_inset space ~
\end_inset

->
\begin_inset space ~
\end_inset

Vector creates a Vector that starts at the CoordSyst position, and ends
 at the given position (another CoordSyst or a Point; aliased to the >>
 operator).
\end_layout

\begin_layout Description
set_identity() resets the CoordSyst position, orientation and scaling.
\end_layout

\begin_layout Description
get_sphere()
\begin_inset space ~
\end_inset

->
\begin_inset space ~
\end_inset

(Point,
\begin_inset space ~
\end_inset

float) returns a sphere (defined by the center Point, and the radius) that
 includes all elements in the CoordSyst.
\end_layout

\begin_layout Description
get_box()
\begin_inset space ~
\end_inset

->
\begin_inset space ~
\end_inset

(Point,
\begin_inset space ~
\end_inset

Point) returns a sphere (defined by two corners) that includes all elements
 in the CoordSyst.
\end_layout

\begin_layout Description
interpolate(state1,
\begin_inset space ~
\end_inset

state2,
\begin_inset space ~
\end_inset

factor) moves, rotates and scales the CoordSyst by interpolating between
 the two CoordSystStates state1 and state2.
 factor indicates the weight of the two CoordSystStates (0.0 means state1,
 1.0 state2, and 0.5 half-way).
 XXX details interpolation in an other chapter; this feature is not yet
 stable.
\end_layout

\begin_layout Description
set_xyz(x,
\begin_inset space ~
\end_inset

y,
\begin_inset space ~
\end_inset

z) set the x, y and z attributes in a single call.
\end_layout

\begin_layout Description
move(position) moves the CoordSyst at the same place than position (another
 CoordSyst or a Point).
\end_layout

\begin_layout Description
add_vector(vector) translates the CoordSyst by the given Vector (aliased
 to the += operator) .
\end_layout

\begin_layout Description
add_mul_vector(k,
\begin_inset space ~
\end_inset

vector) translates the CoordSyst by k times the given Vector (equivalent
 to, but faster than, add_vector(k * vector)).
\end_layout

\begin_layout Description
add_xyz(x,
\begin_inset space ~
\end_inset

y,
\begin_inset space ~
\end_inset

z) translates the CoordSyst by (x, y, z) (expressed in the CoordSyst's parent
 coordinate system).
\end_layout

\begin_layout Description
shift(x,
\begin_inset space ~
\end_inset

y,
\begin_inset space ~
\end_inset

z) translates the CoordSyst by (x, y, z) (expressed in the CoordSyst coordinate
 system).
\end_layout

\begin_layout Description
rotate_x(angle),
\begin_inset space ~
\end_inset

rotate_vertical(angle) rotates arround the CoordSyst's parent X axis (like
 of you rotate the head vertically).
\end_layout

\begin_layout Description
rotate_y(angle),
\begin_inset space ~
\end_inset

rotate_lateral(angle) rotates arround the CoordSyst's parent Y axis (like
 of you rotate the head laterally).
\end_layout

\begin_layout Description
rotate_z(angle),
\begin_inset space ~
\end_inset

rotate_incline(angle) rotates arround the CoordSyst's parent Z axis(like
 of you roll the head).
\end_layout

\begin_layout Description
turn_x(angle),
\begin_inset space ~
\end_inset

turn_vertical(angle) rotates arround the CoordSyst local X axis.
\end_layout

\begin_layout Description
turn_y(angle),
\begin_inset space ~
\end_inset

turn_lateral(angle) rotates arround the CoordSyst local Y axis.
\end_layout

\begin_layout Description
turn_z(angle),
\begin_inset space ~
\end_inset

turn_incline(angle) rotates arround the CoordSyst local Z axis.
\end_layout

\begin_layout Description
rotate(angle,
\begin_inset space ~
\end_inset

a,
\begin_inset space ~
\end_inset

b) rotates around the axis defined by the a and b position (CoordSysts or
 Points).
\end_layout

\begin_layout Description
rotate_axis(angle,
\begin_inset space ~
\end_inset

axis) rotates around the axis defined by the origin (0, 0, 0) and the Vector
 axis.
\end_layout

\begin_layout Description
rotate_xyz(angle,
\begin_inset space ~
\end_inset

a_x,
\begin_inset space ~
\end_inset

a_y,
\begin_inset space ~
\end_inset

a_z,
\begin_inset space ~
\end_inset

b_x,
\begin_inset space ~
\end_inset

b_y,
\begin_inset space ~
\end_inset

b_z) rotates around the axis defined by (a_x, a_y, a_z) and (b_x, b_y, b_z).
\end_layout

\begin_layout Description
rotate_axis_xyz(angle,
\begin_inset space ~
\end_inset

axis_x,
\begin_inset space ~
\end_inset

axis_y,
\begin_inset space ~
\end_inset

axis_z) rotates around the axis defined by the origin (0, 0, 0) and the
 (axis_x, axis_y, axis_z) Vector.
\end_layout

\begin_layout Description
look_at(target) rotates the CoordSyst so as his front (
\emph on
i.e.

\emph default
 -Z) direction points toward the given target, and tries to maintain the
 Y direction as the up direction.
\end_layout

\begin_layout Description
look_at_x(target) is similar to look_at, but makes the X direction looking
 at the target, instead of -Z.
\end_layout

\begin_layout Description
look_at_y(target) is similar to look_at, but makes the Y direction looking
 at the target, instead of -Z.
\end_layout

\begin_layout Description
scale(x,
\begin_inset space ~
\end_inset

y,
\begin_inset space ~
\end_inset

z) scales the CoordSyst by x, y and z.
\end_layout

\begin_layout Description
set_scale_factors(scale_x,
\begin_inset space ~
\end_inset

scale_y,
\begin_inset space ~
\end_inset

scale_z) sets the scale_x, scale_y and scale_z attributes in a single call.
\end_layout

\begin_layout Description
get_dimension()
\begin_inset space ~
\end_inset

->
\begin_inset space ~
\end_inset

(float,
\begin_inset space ~
\end_inset

float,
\begin_inset space ~
\end_inset

float) returns the width, height and depth dimension of the CoordSyst.
\end_layout

\begin_layout Description
set_dimension(width,
\begin_inset space ~
\end_inset

height,
\begin_inset space ~
\end_inset

depth) scales the CoordSyst so as its dimensions are the given width, height
 and depth.
\end_layout

\begin_layout Description
CoordSyst1
\begin_inset space ~
\end_inset

%
\begin_inset space ~
\end_inset

CoordSyst2
\begin_inset space ~
\end_inset

->
\begin_inset space ~
\end_inset

Point returns a Point at the same place than CoordSyst1, but in the CoordSyst2
 coordinate system (the returned value may be CoordSyst1 itself if it is
 already in CoordSyst2, or a newly created Point).
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Body"

\end_inset

Body
\end_layout

\begin_layout Standard
Inherits from: 
\series bold
CoordSyst
\series default
.
\end_layout

\begin_layout Standard
A Body displays a Model at a specific 3D position.
 Model cannot be displayed without 
\begin_inset Quotes eld
\end_inset

emBodying
\begin_inset Quotes erd
\end_inset

 them; it allows to display the same Model at several location (
\emph on
e.g.

\emph default
 two identical houses in a town), by creating two Bodies with the same Model.
\end_layout

\begin_layout Standard
Constructor is:
\end_layout

\begin_layout Description
Body(parent=None,
\begin_inset space ~
\end_inset

model=None,
\begin_inset space ~
\end_inset

opt=None)
\begin_inset space ~
\end_inset

->
\begin_inset space ~
\end_inset

Body where parent and model are obvious, and opt is an optional argument
 passed to the model (for AnimatedModel, it can be a list of the mesh names
 to attach, see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "cha:Animated-models"

\end_inset

).
\end_layout

\begin_layout Standard
Noticeable attributes are:
\end_layout

\begin_layout Description
model the Model the Body displays.
\end_layout

\begin_layout Description
deforms the list of Deform applied to the Body (default to an empty list;
 you should not modify the list directly, but use the add_deform and remove_defo
rm methods; see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Model-Deforms"

\end_inset

).
\end_layout

\begin_layout Standard
The following attribute is only available if the Body's Model is an AnimatedMode
l (see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "cha:Animated-models"

\end_inset

):
\end_layout

\begin_layout Description
attached_meshes the list of the attached meshes names (only with AnimatedModel,
 see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "cha:Animated-models"

\end_inset

).
\end_layout

\begin_layout Standard
Noticeable methods are:
\end_layout

\begin_layout Description
add_deform(deform) applies the given Deform to the Body (see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Model-Deforms"

\end_inset

).
\end_layout

\begin_layout Description
remove_deform(deform) removes the given Deform from the Body (see section
 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Model-Deforms"

\end_inset

).
\end_layout

\begin_layout Standard
The following methods are only available if the Body's Model is an AnimatedModel
 (see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "cha:Animated-models"

\end_inset

):
\end_layout

\begin_layout Description
attach(mesh_name1,
\begin_inset space ~
\end_inset

mesh_name2,...) attaches the meshes of the given names.
\end_layout

\begin_layout Description
detach(mesh_name1,
\begin_inset space ~
\end_inset

mesh_name2,...) detaches the meshes of the given names.
\end_layout

\begin_layout Description
is_attached(mesh_name)
\begin_inset space ~
\end_inset

->
\begin_inset space ~
\end_inset

int returns true if the mesh named mesh_name is attached.
\end_layout

\begin_layout Description
animate_blend_cycle(animation_name,
\begin_inset space ~
\end_inset

weight=1.0,
\begin_inset space ~
\end_inset

fade_in=0.2) plays the animation of the given name in cycle, with the given
 weight (usefull is several animations are cycled simultaneously, which
 is possible), and fade_in is the time (in second) needed to reach the full
 weight, in order to avoid a brutal transition.
 The animation will 
\series bold
not
\series default
 start at its beginning, but at the current global animation time, which
 is shared by all cycles (use animate_reset if you want to start a cycle
 at its beginning).
\end_layout

\begin_layout Description
animate_clear_cycle(animation_name,
\begin_inset space ~
\end_inset

fade_out=0.2) stops cycling the animation of the given name; fade_out is
 the time (in second) needed to stop the animation.
\end_layout

\begin_layout Description
animate_execute_action(animation_name,
\begin_inset space ~
\end_inset

fade_in=0.2,
\begin_inset space ~
\end_inset

fade_out=0.2) plays the animation of the given name once; fade_in and fade_out
 are the time (in second) needed to reach full weight, and to stop the animation
, in order to avoid brutal transitions.
\end_layout

\begin_layout Description
animate_reset() immidiately stops 
\series bold
all
\series default
 animations, and resets the cycle animation time, 
\emph on
i.e.

\emph default
 future animations played with animate_blend_cycle will restart from their
 beginning.
\end_layout

\begin_layout Description
set_lod_level() set the current LOD level (only if the Cal3D model file
 support it).
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:World"

\end_inset

World
\end_layout

\begin_layout Standard
Inherits from: 
\series bold
Body, SavedInAPath
\series default
.
\end_layout

\begin_layout Standard
Constructor and loading class methods are:
\end_layout

\begin_layout Description
World(parent=None,
\begin_inset space ~
\end_inset

model=None,
\begin_inset space ~
\end_inset

opt=None)
\begin_inset space ~
\end_inset

->
\begin_inset space ~
\end_inset

World equivalent to Body's constructor.
\end_layout

\begin_layout Description
World.load(filename) loads a World (see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:SavedInAPath"

\end_inset

).
\end_layout

\begin_layout Description
World.get(filename) loads a World, using a cache of already loaded Worlds
 (see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:SavedInAPath"

\end_inset

).
\end_layout

\begin_layout Standard
Noticeable attributes are:
\end_layout

\begin_layout Description
children the list of children CoordSyst directly nested in the World.
 Do not modify the list (use the add and remove methods).
\end_layout

\begin_layout Description
filename the World's filename (relative to the <data>/worlds/ directory;
 defaults to None).
\end_layout

\begin_layout Description
atmosphere the Atmosphere, defining the World atmospheric properties like
 fog, sky or background color (defaults to None, see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Atmosphere"

\end_inset

).
\end_layout

\begin_layout Description
model_builder the ModelBuider, 
\emph on
i.e.

\emph default
 the object responsible for turning the World into a Model (defaults to
 None; in this case, a default ModelBuilder is used, see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "cha:Modeling"

\end_inset

).
 ModelBuider can be used to add shadows, cell-shading,...
\end_layout

\begin_layout Standard
The following attributes are only available if the World's Model is an AnimatedM
odel (see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "cha:Animated-models"

\end_inset

):
\end_layout

\begin_layout Description
attached_coordsysts the list of the CoordSysts attached to a bone, containing
 (CoordSyst, bone_id, option_flags) tuples (only with AnimatedModel, see
 chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "cha:Animated-models"

\end_inset

).
\end_layout

\begin_layout Standard
Noticeable methods are:
\end_layout

\begin_layout Description
add(CoordSyst) adds the given CoordSyst inside the World.
\end_layout

\begin_layout Description
insert(index,
\begin_inset space ~
\end_inset

CoordSyst) is similar to add, but insert the CoordSyst at the given index
 in the children list.
\end_layout

\begin_layout Description
remove(CoordSyst) removes the given CoordSyst from the World.
\end_layout

\begin_layout Description
recursive()
\begin_inset space ~
\end_inset

->
\begin_inset space ~
\end_inset

list
\begin_inset space ~
\end_inset

of
\begin_inset space ~
\end_inset

CoordSysts returns the recursive list of children CoordSysts, 
\emph on
i.e.

\emph default
 the children list, plus the children list of the nested Worlds, and so
 on.
\end_layout

\begin_layout Description
search(predicate)
\begin_inset space ~
\end_inset

->
\begin_inset space ~
\end_inset

CoordSyst searches (recursively) for a CoordSyst that satisfies the given
 predicate; predicate is callable that take a CoordSyst argument and that
 return true of false.
\end_layout

\begin_layout Description
search_all(predicate)
\begin_inset space ~
\end_inset

->
\begin_inset space ~
\end_inset

list
\begin_inset space ~
\end_inset

of
\begin_inset space ~
\end_inset

CoordSysts is like search, but returns the list of all CoordSysts that satisfy
 the predicate.
\end_layout

\begin_layout Description
search_name(name)
\begin_inset space ~
\end_inset

->
\begin_inset space ~
\end_inset

CoordSyst searches (recursively) for a CoordSyst whose name attribute is
 the given name (aliased to World[name]).
\end_layout

\begin_layout Description
subitem(namepath)
\begin_inset space ~
\end_inset

->
\begin_inset space ~
\end_inset

CoordSyst returns the CoordSyst denoted by namepath.
 namepath is one or more names separated by dots, 
\emph on
e.g.

\emph default
 "character.head.mouth".
\end_layout

\begin_layout Description
to_model()
\begin_inset space ~
\end_inset

->
\begin_inset space ~
\end_inset

Model turns the World into a Model (see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "cha:Modeling"

\end_inset

).
\end_layout

\begin_layout Description
raypick(origin,
\begin_inset space ~
\end_inset

direction,
\begin_inset space ~
\end_inset

distance=-1.0,
\begin_inset space ~
\end_inset

half_line=1,
\begin_inset space ~
\end_inset

cull_face=1,
\begin_inset space ~
\end_inset

p=None,
\begin_inset space ~
\end_inset

v=None)
\begin_inset space ~
\end_inset

->
\begin_inset space ~
\end_inset

(Point,
\begin_inset space ~
\end_inset

Vector) performs a raypicking, and returns either a (impact_point, normal_at_the
_impact) tuple, or None (see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Raypicking"

\end_inset

).
\end_layout

\begin_layout Description
raypick_b(origin,
\begin_inset space ~
\end_inset

direction,
\begin_inset space ~
\end_inset

distance=-1.0,
\begin_inset space ~
\end_inset

half_line=1,
\begin_inset space ~
\end_inset

cull_face=1)
\begin_inset space ~
\end_inset

->
\begin_inset space ~
\end_inset

int performs a raypicking, and returns 1 if there is a collision, and 0
 if there is not (see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Raypicking"

\end_inset

).
\end_layout

\begin_layout Description
RaypickContext(center,
\begin_inset space ~
\end_inset

radius,
\begin_inset space ~
\end_inset

RaypickContext=None,
\begin_inset space ~
\end_inset

items
\begin_inset space ~
\end_inset

=
\begin_inset space ~
\end_inset

None)
\begin_inset space ~
\end_inset

->
\begin_inset space ~
\end_inset

RaypickContext creates a RaypickingContext.
 RaypickingContext are used to perform several raypicking in the same region,
 faster than by calling raypick or raypick_b (see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Raypicking"

\end_inset

).
\end_layout

\begin_layout Standard
The following methods are only available if the World's Model is an AnimatedMode
l (see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "cha:Animated-models"

\end_inset

):
\end_layout

\begin_layout Description
attach_to_bone(CoordSyst,
\begin_inset space ~
\end_inset

bone_name) attaches the given CoordSyst (which is understood to be a direct
 child of the World) to the bone of the given name.
 When the bone is moved by the animation, the CoordSyst moves too.
\end_layout

\begin_layout Description
detach_from_bone(CoordSyst) detaches the given CoordSyst from a bone.
\end_layout

\begin_layout Subsection
Camera
\end_layout

\begin_layout Standard
Camera is the 
\begin_inset Quotes eld
\end_inset

eye
\begin_inset Quotes erd
\end_inset

 from which the 3D scene is viewed.
 It also acts as the 
\begin_inset Quotes eld
\end_inset

ear
\begin_inset Quotes erd
\end_inset

, for 3D sound.
 It also inherits from Widget (see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "cha:Widget-systems"

\end_inset

).
\end_layout

\begin_layout Standard
Inherits from: 
\series bold
CoordSyst
\series default
, 
\series bold
Widget
\series default
.
\end_layout

\begin_layout Standard
Constructor is:
\end_layout

\begin_layout Description
Camera(CoordSyst)
\begin_inset space ~
\end_inset

->
\begin_inset space ~
\end_inset

Camera
\end_layout

\begin_layout Standard
Noticeable attributes are:
\end_layout

\begin_layout Description
front the minimum distance at which 3D objects can be seen (defaults to
 0.1; cannot be 0.0).
\end_layout

\begin_layout Description
back the maximum distance at which 3D objects can be seen (defaults to 100.0).
 If the back / front ratio is too big, you loose precision in the depth
 buffer.
\end_layout

\begin_layout Description
fov the field of vision (or FOV), in degrees.
 Default is 60.0.
\end_layout

\begin_layout Description
left,
\begin_inset space ~
\end_inset

top,
\begin_inset space ~
\end_inset

width,
\begin_inset space ~
\end_inset

height the viewport rectangle, in pixel.
 Use it if you want the Camera to render only on a part of the screen.
 It defaults to the whole screen.
\end_layout

\begin_layout Description
partial if true, the Camera is considered to use only a part of the screen,
 and not the whole screen, in particular for clearing purpose.
 Clearing a partial Camera is slower, but it doesn't clear the whole screen
 (defaults to false).
\end_layout

\begin_layout Description
ortho if true, the Camera uses orthogonal perspective; if false (default)
 it uses real perspective.
\end_layout

\begin_layout Description
listen_sound true if the Camera is used as the 
\begin_inset Quotes eld
\end_inset

sound listener
\begin_inset Quotes erd
\end_inset

.
 A single Camera can be used so at the same time (defaults to true, see
 section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Sound-and-multiple-Cameras"

\end_inset

).
\end_layout

\begin_layout Description
to_render the world that is rendered by the Camera.
 Default is None, which means the root scene (as returned by get_root()).
\end_layout

\begin_layout Description
master the master Widget (see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Widgets"

\end_inset

).
\end_layout

\begin_layout Standard
Noticeable methods are:
\end_layout

\begin_layout Description
set_viewport(left,
\begin_inset space ~
\end_inset

top,
\begin_inset space ~
\end_inset

width,
\begin_inset space ~
\end_inset

height) sets left, top, width and height in a single call.
\end_layout

\begin_layout Description
get_screen_width(),
\begin_inset space ~
\end_inset

get_screen_height()
\begin_inset space ~
\end_inset

->
\begin_inset space ~
\end_inset

int gets the width and the height of the rendering screen, in pixel.
\end_layout

\begin_layout Description
coord2d_to_3d(x,
\begin_inset space ~
\end_inset

y,
\begin_inset space ~
\end_inset

z,
\begin_inset space ~
\end_inset

reused_Point=None)
\begin_inset space ~
\end_inset

->
\begin_inset space ~
\end_inset

Point converts 2D coordinates X and Y (in pixel, 
\emph on
e.g.

\emph default
 mouse position) into a Point.
 Z is the Point Z coordinates (in the Camera coordinate system) ; it should
 be negative and defaults to -1.0.
 reused_Point is an optionnal Point that is used to store the result, if
 you want to avoid the creation of a new Point object and prefer reuse an
 existant one (for speed purpose).
\end_layout

\begin_layout Description
coord3d_to_2d(Point)
\begin_inset space ~
\end_inset

->
\begin_inset space ~
\end_inset

(x,
\begin_inset space ~
\end_inset

y) converts a Point (or a CoordSyst) into 2D screen coordinates X, Y (in
 pixel).
\end_layout

\begin_layout Description
render_to_material(Material,
\begin_inset space ~
\end_inset

what) renders the camera to a Material's texture.
 'what' is one of GL_RGBA, GL_LUMINANCE, GL_ALPHA.
\end_layout

\begin_layout Description
is_in_frustum(CoordSyst)
\begin_inset space ~
\end_inset

->
\begin_inset space ~
\end_inset

int returns true if the given CoordSyst is inside the Camera's frustum.
\end_layout

\begin_layout Subsection
Light
\end_layout

\begin_layout Standard
Inherits from: 
\series bold
CoordSyst
\series default
.
\end_layout

\begin_layout Standard
Constructor is:
\end_layout

\begin_layout Description
Light(CoordSyst)
\begin_inset space ~
\end_inset

->
\begin_inset space ~
\end_inset

Light
\end_layout

\begin_layout Standard
Noticeable attributes are:
\end_layout

\begin_layout Description
constant the constant attenuation of the Light (defaults to 1.0).
 This attenuation factor is not influenced by the distance.
\end_layout

\begin_layout Description
linear the linear attenuation of the Light (defaults to 0.0).
 This attenuation factor is proportional to the distance.
\end_layout

\begin_layout Description
quadratic the quadratic attenuation of the Light (defaults to 0.0).
 This attenuation factor is proportional to the square distance.
\end_layout

\begin_layout Description
ambient the ambient color of the Light (defaults to no ambient, 
\emph on
i.e.

\emph default
 black or (0.0, 0.0, 0.0, 1.0)).
 This part of the Light is not affected by the Light's orientation or attenuatio
n.
\end_layout

\begin_layout Description
diffuse the diffuse color of the Light (defaults to white, 
\emph on
i.e.

\emph default
 (1.0, 1.0, 1.0, 1.0)).
 This color is the 
\begin_inset Quotes eld
\end_inset

main color
\begin_inset Quotes erd
\end_inset

 of the Light.
\end_layout

\begin_layout Description
specular the specular color of the Light (defaults to white, 
\emph on
i.e.

\emph default
 (1.0, 1.0, 1.0, 1.0)).
 This color is used for the bright part of the object.
\end_layout

\begin_layout Description
directional if true, the Light is directional (
\emph on
e.g.

\emph default
 a sun).
 If false (default), The position of a directional Light doesn't matter,
 and only the constant component of the attenuation is used.
\end_layout

\begin_layout Description
angle if angle is < 180.0, the Light is a spotlight; angle being the angle
 of the splot (defaults to 180.0).
\end_layout

\begin_layout Description
exponent modifies how a spotlight Light is spread over space.
\end_layout

\begin_layout Description
top_level if true, the Light pass through Portal (see section ; defaults
 to false).
\end_layout

\begin_layout Description
cast_shadow if true, the Light casts shadows on Model with shadow enabled
 (default is true).
\end_layout

\begin_layout Description
shadow_color the color of the shadows casted by the Light (default is semi-trans
parent black, 
\emph on
i.e.

\emph default
 (0.0, 0.0, 0.0, 0.5)).
\end_layout

\begin_layout Subsection
Point
\end_layout

\begin_layout Standard
Constructor is:
\end_layout

\begin_layout Description
Point(CoordSyst,
\begin_inset space ~
\end_inset

x,
\begin_inset space ~
\end_inset

y,
\begin_inset space ~
\end_inset

z)
\begin_inset space ~
\end_inset

->
\begin_inset space ~
\end_inset

Point
\end_layout

\begin_layout Standard
Noticeable attributes are:
\end_layout

\begin_layout Description
x,
\begin_inset space ~
\end_inset

y,
\begin_inset space ~
\end_inset

z the X, Y and Z coordinates (defaults to 0.0, 0.0, 0.0).
\end_layout

\begin_layout Description
parent the CoordSyst in which the Point is defined.
\end_layout

\begin_layout Standard
Noticeable methods are:
\end_layout

\begin_layout Description
get_root()
\begin_inset space ~
\end_inset

->
\begin_inset space ~
\end_inset

World get the root parent of the Point (the scene).
\end_layout

\begin_layout Description
position()
\begin_inset space ~
\end_inset

->
\begin_inset space ~
\end_inset

Point creates a Point in the same parent and at the same place than the
 Point.
\end_layout

\begin_layout Description
distance_to(position)
\begin_inset space ~
\end_inset

->
\begin_inset space ~
\end_inset

float returns the distance between the Point and position (another CoordSyst
 or a Point).
\end_layout

\begin_layout Description
vector_to(position)
\begin_inset space ~
\end_inset

->
\begin_inset space ~
\end_inset

Vector creates a Vector that starts at the Point position, and ends at the
 given position (another CoordSyst or a Point; aliased to the >> operator).
\end_layout

\begin_layout Description
set_xyz(x,
\begin_inset space ~
\end_inset

y,
\begin_inset space ~
\end_inset

z) set the x, y and z attributes in a single call.
\end_layout

\begin_layout Description
move(position) moves the Point at the same place than position (another
 CoordSyst or a Point).
\end_layout

\begin_layout Description
add_vector(vector) translates the Point by the given Vector (aliased to
 the += operator) .
\end_layout

\begin_layout Description
add_mul_vector(k,
\begin_inset space ~
\end_inset

vector) translates the Point by k times the given Vector (equivalent to,
 but faster than, add_vector(k * vector)).
\end_layout

\begin_layout Description
add_xyz(x,
\begin_inset space ~
\end_inset

y,
\begin_inset space ~
\end_inset

z) translates the Point by (x, y, z) (expressed in the CoordSyst's parent
 coordinate system).
\end_layout

\begin_layout Description
copy()
\begin_inset space ~
\end_inset

->
\begin_inset space ~
\end_inset

Point returns a copy of the Point 
\end_layout

\begin_layout Description
clone(other) changes in place the Point so as it is a clone of other (a
 Point or a CoordSyst).
\end_layout

\begin_layout Description
convert_to(CoordSyst) converts in place the Point to the CoordSyst coordinates
 system.
 The x, y and z coordinates are modified, and the Point's parent is set
 to the given CoordSyst.
\end_layout

\begin_layout Description
Point
\begin_inset space ~
\end_inset

%
\begin_inset space ~
\end_inset

CoordSyst
\begin_inset space ~
\end_inset

->
\begin_inset space ~
\end_inset

Point returns a Point at the same place than the Point, but in the CoordSyst
 coordinate system (the returned value may be the Point itself if it is
 already in the right CoordSyst, or a newly created Point).
\end_layout

\begin_layout Description
Point
\begin_inset space ~
\end_inset

+
\begin_inset space ~
\end_inset

Vector,
\begin_inset space ~
\end_inset

Point
\begin_inset space ~
\end_inset

-
\begin_inset space ~
\end_inset

Vector
\begin_inset space ~
\end_inset

->
\begin_inset space ~
\end_inset

Point translates the Point by the Vector.
\end_layout

\begin_layout Subsection
Vector
\end_layout

\begin_layout Standard
Vector inherits from Point for implementation and internal purpose, although
 it can be seen as a mathematical absurdity.
\end_layout

\begin_layout Standard
Constructor is:
\end_layout

\begin_layout Description
Vector(CoordSyst,
\begin_inset space ~
\end_inset

x,
\begin_inset space ~
\end_inset

y,
\begin_inset space ~
\end_inset

z)
\begin_inset space ~
\end_inset

->
\begin_inset space ~
\end_inset

Vector
\end_layout

\begin_layout Description
CoordSyst_or_Point.vector_to(CoordSyst_or_Point)
\begin_inset space ~
\end_inset

->
\begin_inset space ~
\end_inset

Vector (aliased to >>).
\end_layout

\begin_layout Standard
Noticeable methods are:
\end_layout

\begin_layout Description
length()
\begin_inset space ~
\end_inset

->
\begin_inset space ~
\end_inset

float returns the length of the Vector.
\end_layout

\begin_layout Description
set_length(float) scales the Vector so as its length is the given value.
\end_layout

\begin_layout Description
normalize() scales the Vector so as its length is 1.0.
\end_layout

\begin_layout Description
dot_product(Vector)
\begin_inset space ~
\end_inset

->
\begin_inset space ~
\end_inset

float returns the dot product of two Vectors.
\end_layout

\begin_layout Description
cross_product(Vector,
\begin_inset space ~
\end_inset

reused_Vector
\begin_inset space ~
\end_inset

=
\begin_inset space ~
\end_inset

None)
\begin_inset space ~
\end_inset

->
\begin_inset space ~
\end_inset

Vector returns the cross product of two Vectors; if reused_Vector is given,
 the result will be written in it instead of creating a new Vector.
\end_layout

\begin_layout Description
angle_to(Vector)
\begin_inset space ~
\end_inset

->
\begin_inset space ~
\end_inset

float returns the angle between the two Vectors (in degrees).
\end_layout

\begin_layout Description
set_start_end(start,
\begin_inset space ~
\end_inset

end) changes the Vector in place so as it starts and ends at the given start
 and end (Point or CoordSyst).
\end_layout

\begin_layout Description
Vector
\begin_inset space ~
\end_inset

+
\begin_inset space ~
\end_inset

Vector,
\begin_inset space ~
\end_inset

Vector
\begin_inset space ~
\end_inset

-
\begin_inset space ~
\end_inset

Vector
\begin_inset space ~
\end_inset

->
\begin_inset space ~
\end_inset

Vector vectorial addition.
\end_layout

\begin_layout Description
float
\begin_inset space ~
\end_inset

*
\begin_inset space ~
\end_inset

Vector scales the Vector.
\end_layout

\begin_layout Subsection
Interesting methods for overriding
\end_layout

\begin_layout Standard
When overriding a Soya method, 
\series bold
don't forget to call the super implementation
\series default
!
\end_layout

\begin_layout Description
CoordSyst.begin_round() (see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Time-management"

\end_inset

).
\end_layout

\begin_layout Description
CoordSyst.advance_time(proportion) (see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Time-management"

\end_inset

).
\end_layout

\begin_layout Description
CoordSyst.end_round() (see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Time-management"

\end_inset

).
\end_layout

\begin_layout Description
CoordSyst.added_into(newparent) is called whenever the CoordSyst is added
 into a new World, or removed from its current World (in this case, newparent
 is None).
\end_layout

\begin_layout Description
CoordSyst.loaded() is called 
\series bold
after
\series default
 the object was loaded from a file.
 Notice that, if you want to perform some hacking on file loading that involves
 
\series bold
several
\series default
 objects, overriding CoordSyst.loaded is safer than CoordSyst.__setstate__,
 since other objects may not be fully initialized when CoordSyst.__setstate__
 is called.
\end_layout

\begin_layout Description
World.add(coordsyst)
\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "cha:Managing-data"

\end_inset

Managing data
\end_layout

\begin_layout Section
Data path
\end_layout

\begin_layout Standard
Soya stores each class of object in a separate subdirectory in <data>, the
 data path given at the initialization.
 <data> is expected to contains the following subdirectories:
\end_layout

\begin_layout Description
<data>/images contains image files (PNG or JPEG; for JPEG you should use
 the .jpeg extension, and not .jpg).
\end_layout

\begin_layout Description
<data>/materials contains Soya Materials.
\end_layout

\begin_layout Description
<data>/models contains Soya Models.
\end_layout

\begin_layout Description
<data>/animated_models contains Soya AnimatedModels (in Cal3D format, using
 a directory per AnimatedModel, see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "cha:Animated-models"

\end_inset

).
\end_layout

\begin_layout Description
<data>/worlds contains Soya Worlds.
 These Worlds can either be though as 3D scenes.
\end_layout

\begin_layout Description
<data>/blender contains Blender models (see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "cha:Blender-for-Soya"

\end_inset

).
\end_layout

\begin_layout Description
<data>/sounds contains sound files (WAV or OGG Vorbis, see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "cha:Sounds"

\end_inset

).
\end_layout

\begin_layout Description
<data>/fonts contains Fonts (see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Fonts-and-text"

\end_inset

).
\end_layout

\begin_layout Standard
These objects are the objects Soya can load; all of them inherit from SavedInAPa
th (excepted for Blender model, which are not Soya objects, of course).
 Other Soya objects can be saved, but not directly.
 For example, you cannot save just a Body in a file, but you can include
 a Body inside a World, and then you can save the World.
\end_layout

\begin_layout Description
Known
\begin_inset space ~
\end_inset

bug: Currently, Camera cannot be saved in files.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:File-formats"

\end_inset

File formats
\end_layout

\begin_layout Standard
All Soya-specific objects (Materials, non-animated Models, Worlds and their
 content) are saved through serialization.
 Soya currently supports two file formats: Pickle and Cerealizer.
 Pickle (actually cPickle) is integrated into Python, and can save any object
 you may create, however 
\series bold
Pickle is not secure
\series default
 for networking game.
 Cerealizer (
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://home.gna.org/oomadness/en/cerealizer
\end_layout

\end_inset

) is secure, but it requires you to register manually the class that are
 safe to read from a file.
\end_layout

\begin_layout Standard
The default file formats is to save files with Pickle, and to load either
 Pickle or Cerealizer files (Soya can determine automatically the format
 of a file; if Cerealizer is not installed, loading Cerealizer file is of
 course disabled).
 However, you are encouraged to use Cerealizer for security purpose.
\end_layout

\begin_layout Standard
To set the file formats, use the following function:
\end_layout

\begin_layout Description
set_file_format(saving_format,
\begin_inset space ~
\end_inset

loading_formats
\begin_inset space ~
\end_inset

=
\begin_inset space ~
\end_inset

None) where saving_format is the format for saving files (either a function
 with a signature like pickle.dumps, or a module with a dumps function),
 and loading_formats is the format for loading files (either a function
 with a signature like pickle.loads, or a module with a loads function),
 or a list of formats.
 If loading_formats is None, the loading formats are left unmodified.
\end_layout

\begin_layout Standard
The actual default (which may change) is equivalent to:
\end_layout

\begin_layout LyX-Code
import cPickle, Cerealizer
\end_layout

\begin_layout LyX-Code
set_file_format(cPickle, [cerealizer, cPickle]) # if Cerealizer is available
\end_layout

\begin_layout LyX-Code
set_file_format(cPickle, cPickle)               # if Cerealizer is not available
\end_layout

\begin_layout Standard
To use only Pickle (for compatibility with older apps):
\end_layout

\begin_layout LyX-Code
set_file_format(cPickle, cPickle)
\end_layout

\begin_layout Standard
To use Cerealizer while still being able to read cPickle files:
\end_layout

\begin_layout LyX-Code
set_file_format(cerealizer, [cerealizer, cPickle])
\end_layout

\begin_layout Standard
To use only Cerealizer -- 
\series bold
this is the only configuration safe for networking
\series default
:
\end_layout

\begin_layout LyX-Code
set_file_format(cerealizer, cerealizer)
\end_layout

\begin_layout Standard
If you use Cerealizer you have to declare which class is safe for saving
 / loading.
 Soya automatically register Soya's classes, but you have still to register
 your derived classes.
 This can be done as following:
\end_layout

\begin_layout LyX-Code
class YourClass(soya.CoordSyst):
\end_layout

\begin_layout LyX-Code
    ...
\end_layout

\begin_layout LyX-Code
cerealizer.register(YourClass)
\end_layout

\begin_layout Standard
If your class inherits from SavedInAPath, usually World, and you want YourWorld.g
et to work properly, you should do:
\end_layout

\begin_layout LyX-Code
class YourWorld(soya.World):
\end_layout

\begin_layout LyX-Code
    ...
\end_layout

\begin_layout LyX-Code
cerealizer.register(YourWorld, SavedInAPathHandler(YourWorld))
\end_layout

\begin_layout Standard
And, if you want your objects to be saved in the directory <data>/your_worlds/
 instead of <data>/worlds/, do:
\end_layout

\begin_layout LyX-Code
class YourWorld(soya.World):
\end_layout

\begin_layout LyX-Code
    DIRNAME = "your_worlds"
\end_layout

\begin_layout LyX-Code
    _alls = weakref.WeakValueDictionary()
\end_layout

\begin_layout LyX-Code
    ...
\end_layout

\begin_layout Section
Saving objects
\end_layout

\begin_layout Standard
In Soya, saving an object is done in two steps (see tutorial basic-savingfile-pi
ckle-1 and basic-savingfile-cerealizer-1):
\end_layout

\begin_layout LyX-Code
obj.filename = "your_object"
\end_layout

\begin_layout LyX-Code
obj.save()
\end_layout

\begin_layout Standard
The object is saved in the corresonding subdirectory in the first data path
 (
\emph on
i.e.

\emph default
 soya.path[0]), and the file is named <filename>.data (
\emph on
e.g.

\emph default
 <data>/worlds/your_object.data).
 To save the object again, just call obj.save.
 Images, Sounds, Fonts and AnimatedModels cannot be saved; as Soya is not
 able to modify them, it would be a non-sense.
\end_layout

\begin_layout Standard
When saving a reference to a SavedInAPath object (
\emph on
i.e.

\emph default
 an Image, a Material, a Model, an AnimatedModel, a World, a Sound or a
 Font), if the object has a filename, only the filename will be saved.
 If it has not, the object will be saved normally.
 In the following example, the data of the sword Model are not saved in
 the scene's file:
\end_layout

\begin_layout LyX-Code
scene = soya.World()
\end_layout

\begin_layout LyX-Code
body = soya.Body(scene, soya.Model.get("sword"))
\end_layout

\begin_layout LyX-Code
scene.filename = "sword_scene"
\end_layout

\begin_layout LyX-Code
scene.save()
\end_layout

\begin_layout Standard
When the scene will be loaded, the sword Model will be loaded by calling
 soya.Model.get("sword").
 As a consequence, you'll have to distribute the sword Model along with
 the scene.
\end_layout

\begin_layout Section
Loading objects
\end_layout

\begin_layout Standard
Objects can be loaded with one of these class methods:
\end_layout

\begin_layout Description
SavedInAPath.load(filename)
\begin_inset space ~
\end_inset

->
\begin_inset space ~
\end_inset

SavedInAPath
\end_layout

\begin_layout Description
SavedInAPath.get(filename)
\begin_inset space ~
\end_inset

->
\begin_inset space ~
\end_inset

SavedInAPath
\end_layout

\begin_layout Standard
The difference between load and get is that load always return a new object,
 whereas get return the same object when it is called several time with
 the same filename.
 Images, Models, Sounds and Fonts are immutable in Soya, and thus get is
 the preferred method for loading them.
 For example, to load the sword_scene saved above:
\end_layout

\begin_layout LyX-Code
scene = soya.World.load("sword_scene")
\end_layout

\begin_layout Standard
See also tutorial basic-loadingfile-1.
\end_layout

\begin_layout Subsection
Extended filenames
\end_layout

\begin_layout Standard
The @ character is used to indicate some optional parameters in a filename:
\end_layout

\begin_layout Description
For
\begin_inset space ~
\end_inset

Fonts, it can be used to indicate the horizontal and vertical Font size
 (the horizontal size follows the @, then an x, then the vertical size).
 It can be used to create several Font objects of various sizes from a single
 Font file.
 
\emph on
E.g.

\emph default
 :
\end_layout

\begin_layout LyX-Code
font = soya.Font.get("indigo.ttf@20x30")
\end_layout

\begin_layout Description
For
\begin_inset space ~
\end_inset

Models
\begin_inset space ~
\end_inset

and
\begin_inset space ~
\end_inset

Worlds, it can be used to generate several Worlds and Models from a single
 Blender file (see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Generating-several-Soya"

\end_inset

).
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Auto-exporters"

\end_inset

Auto-exporters and automatic conversions
\end_layout

\begin_layout Standard
When loading data, Soya can automatically perform the following conversions:
\end_layout

\begin_layout Itemize
Image -> Material
\end_layout

\begin_layout Itemize
Blender model -> World
\end_layout

\begin_layout Itemize
World-> Model
\end_layout

\begin_layout Itemize
Blender model -> AnimatedModel
\end_layout

\begin_layout Standard
Concretely, it means that, if you load (with either load or get) a Material
 that doesn't exist, and if there is an Image with the same filename, Soya
 will create a new Material, using this Image as texture, and saved (for
 future use).
 If the Material already exists, but there is a more recently modified Image
 with the same filename, Soya will load the Material, and automatically
 update the texture.
\end_layout

\begin_layout Standard
Similarly, when loading a World, Soya searches for a Blender model with
 the same filename, and, if needed, will export it to Soya (Notice that
 this require Blender to be installed).
 When loading a Model, Soya searches for a World (and thus for a Blender
 model), and, if needed, will load the World and re-turn it to a Model (Models
 are generated from Worlds, see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "cha:Modeling"

\end_inset

).
 This feature is known as 
\begin_inset Quotes eld
\end_inset

Soya's auto-exporters
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
Auto-exporters are really nice for development, however they can be annoying
 in the final version of an application, for example one doesn't expect
 a game to start blender for re-exporting the model (when installing the
 game, the timestamp of the various files may be changed, messing up the
 whole auto-exporters system).
 To prevent that, you can disable auto-exporters as following:
\end_layout

\begin_layout LyX-Code
soya.AUTO_EXPORTERS_ENABLED = 0
\end_layout

\begin_layout Standard
A common trick consists in enabling auto-exportes only for Subversion /
 CVS sources:
\end_layout

\begin_layout LyX-Code
APPDIR = os.path.dirname(sys.argv[0]) # os.path.dirname(__file__) for a Python
 module
\end_layout

\begin_layout LyX-Code
soya.AUTO_EXPORTERS_ENABLED = os.path.exists(os.path.join(APPDIR, ".svn"))
\end_layout

\begin_layout Section
Where can i obtain Models?
\end_layout

\begin_layout Standard
First, you can design model yourself, using a 3D modeler like Blender (see
 chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "cha:Blender-for-Soya"

\end_inset

), or within Python scripts (
\emph on
e.g.

\emph default
 for geometrical model; see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "cha:Modeling"

\end_inset

).
 Free models are also available:
\end_layout

\begin_layout Itemize
Nekeme Prod., an association for Free Game (as in Free Speech) Jiba is a
 member of, maintains the Free Data Repository.
 The FDR is a database of free resources for games, including 3D models,
 images, musics, sounds,...
 It can be browsed at 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://fdr.nekeme.net/
\end_layout

\end_inset

.
\end_layout

\begin_layout Itemize
You can also re-use the model of an existing free game, such as Balazar
 Brother (
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://home.gna.org/oomadness/en/balazar_brother/index.html
\end_layout

\end_inset

).
\end_layout

\begin_layout Section
Object reference
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:SavedInAPath"

\end_inset

SavedInAPath
\end_layout

\begin_layout Standard
SavedInAPath is an abstract mix-in class, used by Image, Material, Model,
 AnimatedModel, World, Sound and Font.
\end_layout

\begin_layout Standard
Noticeable class attributes are:
\end_layout

\begin_layout Description
DIRNAME the data subdirectory used for saving the instance of this class,
 
\emph on
e.g.

\emph default
 
\begin_inset Quotes eld
\end_inset

models
\begin_inset Quotes erd
\end_inset

 for Model.
\end_layout

\begin_layout Standard
Noticeable attributes are:
\end_layout

\begin_layout Description
filename the object's filename (relative to the <data>/<class>/ directory);
 if the extension is .data, it is not present in the filename.
 If the object has a filename, when saving other Soya objects that refer
 to it, only the filename will be saved (this allow to share 
\emph on
e.g.

\emph default
 a Model between two World scenes).
 If the object has no filename, the object will be dupplicated in any other
 file that refer to it.
\end_layout

\begin_layout Standard
Noticeable class methods are:
\end_layout

\begin_layout Description
load(filename)
\begin_inset space ~
\end_inset

->
\begin_inset space ~
\end_inset

SavedInAPath loads the object saved in the <data>/<class>/<filename> file.
 Depending of the object, it may perform automatic conversion.
\end_layout

\begin_layout Description
get(filename)
\begin_inset space ~
\end_inset

->
\begin_inset space ~
\end_inset

SavedInAPath is similar to load, but, if called several times with the same
 with the same filename, it returns the same (cached) object instead of
 loading it twice.
\end_layout

\begin_layout Description
availables()
\begin_inset space ~
\end_inset

->
\begin_inset space ~
\end_inset

list
\begin_inset space ~
\end_inset

of
\begin_inset space ~
\end_inset

strings returns the list of the filename of all the objects available in
 the <data>/<class>/ directory.
\end_layout

\begin_layout Standard
Noticeable methods are:
\end_layout

\begin_layout Description
save(absolute_filename=None) saves the object in <data>/<class>/<filename>,
 or in absolute_filename if given.
 Some objects (namely, Images, Sounds, Fonts and AnimatedModel) cannot be
 saved by Soya, and can only be loaded.
\end_layout

\begin_layout Description
loaded() called when the object is loaded from a file; you may override
 it.
\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "cha:Animated-models"

\end_inset

Animated models
\end_layout

\begin_layout Section
Loading animated model
\end_layout

\begin_layout Standard
AnimatedModels are loaded as usual, excepted that the model is in the Cal3D
 format, and not the Soya one.
 Auto-exporter works as usual with Blender, and generates Cal3D model as
 required.
 For example to load the Cal3D model located in <data>/animated_models/balazar/
 (corresponding to <data>/blender/balazar.blend, if it exists
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
\begin_inset Quotes eld
\end_inset

Balazar
\begin_inset Quotes erd
\end_inset

 is just the name of my sorcerer!
\end_layout

\end_inset

):
\end_layout

\begin_layout LyX-Code
sorcerer_model = soya.AnimatedModel.get("balazar")
\end_layout

\begin_layout Section
Displaying the model
\end_layout

\begin_layout Standard
AnimatedModel can be attributed to Body or World as any other Models:
\end_layout

\begin_layout LyX-Code
sorcerer = soya.Body(scene)
\end_layout

\begin_layout LyX-Code
sorcerer.shape = sorcerer_shape
\end_layout

\begin_layout Section
Attaching meshes
\end_layout

\begin_layout Standard
A Cal3D model can be composed of several meshes, that can be attached (i.e.
 displayed) or not.
 Non-attached meshes are not visible.
 The AnimatedModel.meshes attribute is a dict mapping mesh names to their
 numerical ID.
 By default, all meshes are attached, but you can detach or attach some
 of them, as following:
\end_layout

\begin_layout LyX-Code
print "Available mesh names:", sorcerer_shape.meshes.keys()
\end_layout

\begin_layout LyX-Code
sorcerer.detach("helmet")
\end_layout

\begin_layout LyX-Code
sorcerer.attach("armor")
\end_layout

\begin_layout Standard
Notice that displaying AnimatedModels is much slower than non-animated Model,
 due to the animation-related computation, even if you actually don't play
 animation.
\end_layout

\begin_layout Section
Playing animations
\end_layout

\begin_layout Standard
An AnimatedModel can have several animations ; the AnimatedModel.animations
 attribute is a dict mapping animation names to their numerical ID:
\end_layout

\begin_layout LyX-Code
print "Available animation names:", sorcerer_shape.animations.keys()
\end_layout

\begin_layout Standard
To start playing an animation in loop, use the animate_blend_cycle(animation_nam
e, weight = 1.0, fade_in = 0.2) method (see tutorial character-animation-1.py).
\end_layout

\begin_layout LyX-Code
sorcerer.animate_blend_cycle("walk")
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename /home/jiba/src/soya/tutorial/results/character-animation-1_0.jpeg
	lyxscale 50
	width 15text%

\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Graphics
	filename /home/jiba/src/soya/tutorial/results/character-animation-1_1.jpeg
	lyxscale 50
	width 15text%

\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Graphics
	filename /home/jiba/src/soya/tutorial/results/character-animation-1_2.jpeg
	lyxscale 50
	width 15text%

\end_inset


\end_layout

\begin_layout Standard
Notice that several animation can be played simultaneously, and blended
 together.
 The weight argument indicate the weight of the animation ; it defaults
 to 1.0 but may be changed if there are several simultaneous animations.
 The fade_in argument is the time (in second) to reach the full weight (in
 order to avoid a brutal transition, which corresponds to fade_in = 0.0).
\end_layout

\begin_layout Standard
Then, the animation can be stopped by the animate_clear_cycle(animation_name,
 fade_out = 0.2) method.
 The fade_out argument is the time (in second) required to fully stop the
 animation.
\end_layout

\begin_layout LyX-Code
sorcerer.animate_clear_cycle("walk")
\end_layout

\begin_layout Description
Hint: When you start playing an animation with animate_blend_cycle, the
 animation may not start at the beginning, but at the current Cal3D internal
 counter value.
 The animate_reset() method can be used to reset this internal counter,
 so as cycled animations starts at their beginning.
\end_layout

\begin_layout LyX-Code
sorcerer.animate_reset() # Ensure we start the walking animation at its beginning
\end_layout

\begin_layout LyX-Code
sorcerer.animate_blend_cycle("walk")
\end_layout

\begin_layout Standard
Finally, a last method exists for animation: animate_execute_action(animation_na
me, fade_in = 0.2, fade_out = 0.2).
 It plays an animation once, without the possibility to blend several animation
 at the same time.
 However, I use it rarely, since it is not possible to interrupt the animation
 before its end.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Attaching-objects-to-bones"

\end_inset

Attaching objects to bones
\end_layout

\begin_layout Standard
Soya allows you to attach Soya CoordSyst to the animated bones.
 This is extremely usefull if you want to add items to an animated character,
 like a sword.
 It can also be used for manual collision detection, since it allows to
 know where is located a part of the AnimatedModel.
 We are going to add a sword to the sorcerer.
 For that, we first need the sorcerer to be a World (instead of just a Body),
 and then we create a World corresponding to the right hand of the sorcerer.
 The right hand is added inside the sorcerer ; this is 
\series bold
mandatory
\series default
 for attaching objects to bone !
\end_layout

\begin_layout LyX-Code
sorcerer = soya.World(scene, sorcerer_shape)
\end_layout

\begin_layout LyX-Code
right_hand = soya.World(sorcerer)
\end_layout

\begin_layout Standard
Now, using the World.attach_to_bone(CoordSyst) method, we attach the right
 hand to the sorcerer's bone named "right_hand" (this is the name given
 to the bone in Blender).
 This causes the righ hand World's position and orientation to be automatically
 updated according to the bone's position and orientation.
\end_layout

\begin_layout LyX-Code
sorcerer.attach_to_bone(right_hand, "right_hand")
\end_layout

\begin_layout Standard
And finally, we create a sword Body in the right hand World :
\end_layout

\begin_layout LyX-Code
sword = soya.Body(right_hand, soya.Model.get("sword"))
\end_layout

\begin_layout LyX-Code
sword.rotate_z(180.0) # rotate and position the sword as needed
\end_layout

\begin_layout LyX-Code
sword.set_xyz(0.05, 0.1, 0.0)
\end_layout

\begin_layout Standard
The resulting scene tree is the following (see tutorial character-animation-2.py)
:
\end_layout

\begin_layout LyX-Code
World scene
\end_layout

\begin_layout LyX-Code
  |
\end_layout

\begin_layout LyX-Code
  +-- World sorcerer, displaying the Balazar AnimatedModel
\end_layout

\begin_layout LyX-Code
  |     |
\end_layout

\begin_layout LyX-Code
  |     +-- World right_hand, attached to the bone named "right_hand"
\end_layout

\begin_layout LyX-Code
  |           |
\end_layout

\begin_layout LyX-Code
  |           +-- Body sword, displaying the sword Model
\end_layout

\begin_layout LyX-Code
  |
\end_layout

\begin_layout LyX-Code
  +-- Light light
\end_layout

\begin_layout LyX-Code
  |
\end_layout

\begin_layout LyX-Code
  +-- Camera camera
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename /home/jiba/src/soya/tutorial/results/character-animation-2.jpeg
	lyxscale 50
	width 15text%

\end_inset


\end_layout

\begin_layout Standard
You can detach a CoordSyst from a bone using the World.detach_from_bone(CoordSyst
) method.
\end_layout

\begin_layout Description
Hint: objects that are attached to bone must always be parented to the World
 that have the AnimatedModel, even if the bones are inserted one inside
 the other in Blender.
 For instance, you may have the following scene tree:
\end_layout

\begin_layout LyX-Code
World scene
\end_layout

\begin_layout LyX-Code
  |
\end_layout

\begin_layout LyX-Code
  +-- World sorcerer, displaying the Balazar AnimatedModel
\end_layout

\begin_layout LyX-Code
        |
\end_layout

\begin_layout LyX-Code
        +-- World right_arm, attached to the bone named "right_arm"
\end_layout

\begin_layout LyX-Code
        |
\end_layout

\begin_layout LyX-Code
        +-- World right_hand, attached to the bone named "right_hand"
\end_layout

\begin_layout Section
Object reference
\end_layout

\begin_layout Subsection
AnimatedModel
\end_layout

\begin_layout Standard
Most of the attribute can be set in Python (
\emph on
e.g.

\emph default
 animated_model.sphere = (0.0, 0.0, 0.0, 2.0)), in the .cfg Cal3D file (by adding
 
\emph on
e.g.

\emph default
 sphere=0.0 0.0 0.0 2.0) or in the Blender file (by adding in a text buffer
 called 'soya_params' 
\emph on
e.g.

\emph default
 sphere=0.0 0.0 0.0 2.0, see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Adding-Soya-specific-attributes-in-Blender"

\end_inset

).
\end_layout

\begin_layout Standard
Noticeable attributes are:
\end_layout

\begin_layout Description
animations a dictionary mapping animation names to their numerical ID.
\end_layout

\begin_layout Description
meshes a dictionary mapping mesh names to their numerical ID.
\end_layout

\begin_layout Description
materials a list of the Materials used by the AnimatedModel.
\end_layout

\begin_layout Description
sphere a (x, y, z, radius) tuple defining a culling sphere for the animated
 model (a radius of -1.0 disable sphere culling, which is the default).
 You can set the sphere property for increasing performance.
\end_layout

\begin_layout Description
double_sided if true, draw both sides of each face of the model.
 Default is true.
 It can be disabled for increasing performance.
\end_layout

\begin_layout Description
shadow if true, the model casts shadows.
 Default is false.
\end_layout

\begin_layout Description
cellshading if true, cell-shading is enabled.
 To enable cell-shading, use set_cellshading() or modify the Cal3D .cfg file
 or the Blender file.
\end_layout

\begin_layout Standard
Noticeable methods are:
\end_layout

\begin_layout Description
set_cellshading(shader
\begin_inset space ~
\end_inset

=
\begin_inset space ~
\end_inset

DEFAULT_SHADER,
\begin_inset space ~
\end_inset

outline_color
\begin_inset space ~
\end_inset

=
\begin_inset space ~
\end_inset

BLACK,
\begin_inset space ~
\end_inset

outline_width
\begin_inset space ~
\end_inset

=
\begin_inset space ~
\end_inset

4.0,
\begin_inset space ~
\end_inset

outline_attenuation
\begin_inset space ~
\end_inset

=
\begin_inset space ~
\end_inset

0.3) enable cellshading, with the given shader and outline properties.
 Set outline_width to 0.0 to disable outline.
\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "cha:Blender-for-Soya"

\end_inset

Blender for Soya
\end_layout

\begin_layout Section
Modeling in Blender
\end_layout

\begin_layout Standard
The following Blender tutorial is very short and Soya-oriented.
 XXX add here some links to other Blender tutorials.
\end_layout

\begin_layout Subsection
Drawing the mesh structure
\end_layout

\begin_layout Standard
The first step is to create the mesh structure in Blender.
 I usually start by adding a cube (Menu add->mesh->cube), and then I deform
 it, 
\emph on
e.g.

\emph default
 by selecting vertices (select them with the mouse right button) and then
 moving (press the 
\begin_inset Quotes eld
\end_inset

g
\begin_inset Quotes erd
\end_inset

 key), rotating (press 
\begin_inset Quotes eld
\end_inset

r
\begin_inset Quotes erd
\end_inset

) or scaling (press 
\begin_inset Quotes eld
\end_inset

s
\begin_inset Quotes erd
\end_inset

) them.
 You can also extrude (press 
\begin_inset Quotes eld
\end_inset

e
\begin_inset Quotes erd
\end_inset

, or press space and then click the edit->extrude menu) some vertices or
 faces (to select a face, select all of its vertices).
\end_layout

\begin_layout Standard
Blender has several modes; the first one is the object mode, and allows
 to move the different mesh objects you have (
\emph on
e.g.

\emph default
 the cube).
 If you want to modify a mesh, select it (by clicking on it with the right
 mouse button) and change to the edit mode.
 A third mode, the face mode, will be used later for applying texture.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename blender_mode.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
When drawing the mesh, you should use the Blender axis convention (X is
 right, Y is front and Z is up); the exporter automatically rotates the
 Model so as it uses Soya's convention (X is right, Y is up and Z is back).
\end_layout

\begin_layout Description
Warning: Only triangles or quads are supported; lines, points or more complex
 faces are not.
\end_layout

\begin_layout Subsection
Smooth or solid lighting
\end_layout

\begin_layout Standard
Then you have to choose between smooth or solid lighting.
 Smooth ligthing should be used for objects that are smooth by nature (although
 they are, as any 3D model, made of face).
 The following picture shows two spheres; the left one uses smooth lighting,
 and the right one uses solid lighting.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename /home/jiba/src/soya/tutorial/results/modeling-smoothlit-1.jpeg
	width 30col%

\end_inset


\end_layout

\begin_layout Standard
Notice that the smooth or solid lighting can be set on a per-face basis.
 In addition, Soya automatically remove the smooth lighting between two
 faces that make an angle higher than 80 degrees (this value can be changed
 by setting the max_face_angle parameter).
 This effect is not visible in Blender, but usually corresponds to what
 you expect.
\end_layout

\begin_layout Subsection
Designing textures
\end_layout

\begin_layout Standard
Textures can be done in any 2D bitmap image editor, such as The Gimp.
 Textures should be PNG or JPEG images (with a .jpeg extension), and they
 should be saved in the <data>/images/ directory.
 Soya support RGB and RGBA images, as well as indexed colors.
 The 
\series bold
dimensions of the image must be powers of two
\series default
 (
\emph on
e.g.

\emph default
 8, 16, 32, 64, 128, 256, 512,...
 pixels), but the image doesn't need to be a square.
\end_layout

\begin_layout Description
Hint: Soya automatically check if the texture image has an alpha channel
 or not; however The Gimp (as well as other painting programs) sometimes
 automatically add an undesired alpha channel.
 Since alpha texture are slower that non-alpha one, and possibly buggy when
 two of them overlap (see 
\begin_inset Quotes eld
\end_inset

known bug
\begin_inset Quotes erd
\end_inset

 below), you should ensure it is not the case.
 If needed, remove the alpha channel (
\begin_inset Quotes eld
\end_inset

flatten image 
\begin_inset Quotes erd
\end_inset

 in The Gimp).
\end_layout

\begin_layout Description
Hint: In Blender, the length of the name given to a texture is limited to
 about 19 characters.
 As the exporter assume that this name is the name of the corresponding
 image file (which is the default value in Blender), you should avoid long
 filenames for textures.
\end_layout

\begin_layout Description
Known
\begin_inset space ~
\end_inset

bug: When two semi-transparent objects overlap, because one of them is in
 front of the other, Soya may not render them well, i.e.
 the farther object in front of the other one.
 There are two possible workaround for this bug:
\end_layout

\begin_layout Itemize
For objects like a grid, an herbage or grass, use a texture with a 
\begin_inset Quotes eld
\end_inset

mask
\begin_inset Quotes erd
\end_inset

, instead of a semi-transparent texture.
 A texture with a 
\begin_inset Quotes eld
\end_inset

mask
\begin_inset Quotes erd
\end_inset

 can have transparency, but not semi-transparency.
 Soya automatically uses a mask for texture with an alpha channel, with
 all alpha values being either 0.0 or 1.0 (255 in the Gimp integer notation).
\end_layout

\begin_layout Itemize
For special effects like spells or explosion, use additive blending (see
 section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Materials"

\end_inset

).
 In facts, which object is rendered first as no impact with additive blending,
 as a consequence the bug is now harmless.
 Moreover, additive blending often makes explosions or spells more impressive.
\end_layout

\begin_layout Standard
When an UV image is mapped to a face in Blender, Soya automatically exports
 it using the Material of the same name than the image filename, and creates
 this Material from the image if it doesn't exist yet.
\end_layout

\begin_layout Subsection
Applying the texture to the model
\end_layout

\begin_layout Standard
In Blender, enter in face mode, and select the faces you want to apply the
 texture to (press 
\begin_inset Quotes eld
\end_inset

a
\begin_inset Quotes erd
\end_inset

 to select all faces).
 Then go the the UV/image editor window, and use the Image->Open menu to
 open your texture.
 Finally, position the UV coordinates by moving the vertex of the triangle
 or quad over the texture (NB if Blender does not show UV coordinates in
 the UV/image editor window, click on the UV Texture 
\begin_inset Quotes eld
\end_inset

New
\begin_inset Quotes erd
\end_inset

 button in the Mesh panel).
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename blender_uv_image_editor.png
	scale 50

\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Graphics
	filename blender_uv_image_editor2.png
	lyxscale 84
	scale 42

\end_inset


\end_layout

\begin_layout Standard
\begin_inset space ~
\end_inset


\end_layout

\begin_layout Standard
When exporting to AnimatedModel (i.e.
 to Cal3D format, using BlenderCal), each material need to be associated
 to the corresponding texture.
 This can be done by selecting the right material in the material panel
 (see the first screenshot below), and then by selecting in the texture
 panel, the 
\begin_inset Quotes eld
\end_inset

Image
\begin_inset Quotes erd
\end_inset

 texture type and the right image (see the second screenshot below).
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename blender_material.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename blender_material2.png
	scale 50

\end_inset


\end_layout

\begin_layout Subsection
Face's sides
\end_layout

\begin_layout Standard
By default, Soya and Blender shows only one side of each face (Blender shows
 both side in some draw type modes, but not in the final rendering).
 Which side is visible depends on the normal of the face.
 If a face shows the wrong side, select it (by selecting all of its vertices
 in edition mode, or by selecting it in face mode, and then go to edition
 mode), and then click the 
\begin_inset Quotes eld
\end_inset

flip normal
\begin_inset Quotes erd
\end_inset

 button.
\end_layout

\begin_layout Standard
If you want to show both sides, select the face in face mode, and then click
 the 
\begin_inset Quotes eld
\end_inset

twoside
\begin_inset Quotes erd
\end_inset

 button.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename blender_flip_normal.png
	scale 50

\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Graphics
	filename blender_two_side.png
	scale 50

\end_inset


\end_layout

\begin_layout Subsection
Adding face colors
\end_layout

\begin_layout Standard
You can also add per-face colors, although this feature is not commonly
 used.
 Soya exports them as per-vertex colors (since Soya doesn't support per-face
 colors).
\end_layout

\begin_layout Subsection
SubSurf
\end_layout

\begin_layout Standard
In Blender, SubSurf can be used to automatically increase the details of
 a Model.
 The following picture show the same model without and with SubSurf:
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename blender_subsurf.png
	width 30col%

\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Graphics
	filename blender_subsurf2.png
	scale 50

\end_inset


\end_layout

\begin_layout Standard
When exporting non-animated Model, Soya automatically take SubSurf into
 account.
 However, this is not the case for AnimatedModel.
 A common trick is to apply the SubSurf on the Model (by clicking the 
\begin_inset Quotes eld
\end_inset

Apply
\begin_inset Quotes erd
\end_inset

 button); notice that applying SubSurf destroys any vertex group that you
 may have created, as a consequence it should be done 
\series bold
before
\series default
 defining vertex groups.
\end_layout

\begin_layout Subsection
Adding an armature
\end_layout

\begin_layout Standard
Blender's armatures are the skeletons used for animation.
 An armature is thus required only for AnimatedModel (although it may be
 used on non-animated Model, for generating several Soya Models being the
 same Blender model at different animation frame).
\end_layout

\begin_layout Standard
To add an armature, choose the Add->Armature menu, and then draw the armature's
 bones.
\end_layout

\begin_layout Subsection
Linking bones to vertices
\end_layout

\begin_layout Standard
The second step for AnimatedModels is to link the armature's bones to the
 vertices.
 This can be done:
\end_layout

\begin_layout Itemize
Using vertex groups: select both the model and the armature (in that order),
 and click the Object->Parent->Make
\begin_inset space ~
\end_inset

parent->Armature->Create
\begin_inset space ~
\end_inset

from
\begin_inset space ~
\end_inset

closest
\begin_inset space ~
\end_inset

bones.
 Vertex groups corresponding to the various bones will be automatically
 created, and can then be refined manually.
 However, it seems that the recent version of Blender (2.41) are not as efficient
 for this than older version.
\end_layout

\begin_layout Itemize
Using envelopes: process as above, but choose 
\begin_inset Quotes eld
\end_inset

Don't create group
\begin_inset Quotes erd
\end_inset

 instead of 
\begin_inset Quotes eld
\end_inset

Create from closest bones
\begin_inset Quotes erd
\end_inset

, and then check the 
\begin_inset Quotes eld
\end_inset

envelopes
\begin_inset Quotes erd
\end_inset

 button in the armature's properties.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename blender_armature_envelope.png
	scale 50

\end_inset


\end_layout

\begin_layout Subsection
Adding animations
\end_layout

\begin_layout Standard
In Blender, animations are called 
\begin_inset Quotes eld
\end_inset

actions
\begin_inset Quotes erd
\end_inset

.
 Go to the 
\begin_inset Quotes eld
\end_inset

Action editor
\begin_inset Quotes erd
\end_inset

 window, add a new action, and give it a name.
 In the 3D window, select the armature and enter in the pose mode.
 Then move and rotate the bones, and add a keyframe with the Pose->Insert
\begin_inset space ~
\end_inset

keyframe menu.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename blender_action_editor.png
	scale 50

\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset space ~
\end_inset


\begin_inset Graphics
	filename blender_action_editor2.png
	scale 50

\end_inset


\end_layout

\begin_layout Section
Auto-exporter
\end_layout

\begin_layout Standard
The easiest way to export Blender model is to use the auto-exporter (see
 section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Auto-exporters"

\end_inset

).
\end_layout

\begin_layout Standard
Simply save your Blender model in <data>/blender/ (
\emph on
e.g.

\emph default
 <data>/blender/your_model.blend).
 Then in Soya, load the World or the Model of the same name (without extension),
 
\emph on
e.g.
\emph default
:
\end_layout

\begin_layout LyX-Code
soya.Model.get("your_model")
\end_layout

\begin_layout LyX-Code
soya.AnimatedModel.get("your_model")
\end_layout

\begin_layout Standard
Soya will automatically launch Blender, export the model, cache it in the
 <data>/worlds/, <data>/models/ and <data>/animated_models directories,
 and quit Blender in a fraction of second.
\end_layout

\begin_layout Standard
If the Blender file is updated after that, Soya will automatically re-export
 it.
\end_layout

\begin_layout Section
Blender features exported to Soya
\end_layout

\begin_layout Standard
Here is a summary of the following Blender features that are correctly exported
 to Soya:
\end_layout

\begin_layout Description
Mesh
\begin_inset space ~
\end_inset

structure
\end_layout

\begin_layout Description
Face
\begin_inset space ~
\end_inset

UV
\begin_inset space ~
\end_inset

image (mapped to Face.material, see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "cha:Modeling"

\end_inset

).
\end_layout

\begin_layout Description
Vertex
\begin_inset space ~
\end_inset

UV
\begin_inset space ~
\end_inset

texture
\begin_inset space ~
\end_inset

coordinates (mapped to Vertex.tex_x and Vertex.tex_y, see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "cha:Modeling"

\end_inset

).
\end_layout

\begin_layout Description
Face_twoside (mapped to Face.double_sided, see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "cha:Modeling"

\end_inset

).
\end_layout

\begin_layout Description
Smooth
\begin_inset space ~
\end_inset

or
\begin_inset space ~
\end_inset

solid
\begin_inset space ~
\end_inset

lighting (mapped to Face.smooth_lit, see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "cha:Modeling"

\end_inset

).
\end_layout

\begin_layout Description
Face
\begin_inset space ~
\end_inset

colors (mapped to Vertex.color, see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "cha:Modeling"

\end_inset

).
\end_layout

\begin_layout Standard
For non-animated Model only:
\end_layout

\begin_layout Description
SubSurf
\end_layout

\begin_layout Standard
For AnimatedModel only:
\end_layout

\begin_layout Description
Armature (also called 
\begin_inset Quotes eld
\end_inset

skeleton
\begin_inset Quotes erd
\end_inset

).
\end_layout

\begin_layout Description
Animation (called 
\begin_inset Quotes eld
\end_inset

action
\begin_inset Quotes erd
\end_inset

 in Blender).
\end_layout

\begin_layout Standard
AnimatedModel are exported to the Cal3D file format using BlenderCal (included
 in Soya source ; it requires Blender >= 2.42a).
\end_layout

\begin_layout Standard
\begin_inset Note Comment
status open

\begin_layout Plain Layout
Known
\begin_inset space ~
\end_inset

bug: Blender2Cal3D.py is known to have several bugs.
 I encourage you to export your model as early as possible, to ensure it
 exports well and to avoid loosing too much works.
 When building an AnimatedModel in Blender, you have to follow these rules
 (for more information, read the comment at the beginning of Blender2Cal3D.py):
\end_layout

\begin_layout Plain Layout

\series bold
Avoid moving, rotating or resizing objects
\series default
 (either mesh or armature) ! Instead, edit the object (with tab), select
 all points / bones (with "a"), and move / rotate / resize them.
\end_layout

\begin_layout Plain Layout
Use only a single armature
\end_layout

\begin_layout Plain Layout
Use only a single rootbone (Cal3D doesn't support floating bones)
\end_layout

\begin_layout Plain Layout
Use only locrot keys (Cal3D doesn't support bone's size change)
\end_layout

\begin_layout Plain Layout
Don't try to create child/parent constructs in blender object, that gets
 exported incorrectly at the moment
\end_layout

\begin_layout Plain Layout
Objects or animations whose names start by "_" are not exported (hidden
 object) 
\end_layout

\end_inset


\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Adding-Soya-specific-attributes-in-Blender"

\end_inset

Adding Soya-specific attributes in Blender
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename blender_param_text_buffer.png
	width 50col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "cap:Using-parameter-text"

\end_inset

Using 
\begin_inset Quotes eld
\end_inset

parameter text buffer
\begin_inset Quotes erd
\end_inset

 in Blender
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Soya also provides some features that are not supported by Blender.
 These features can be defined using a 
\begin_inset Quotes eld
\end_inset

parameter text buffer
\begin_inset Quotes erd
\end_inset

 (see figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "cap:Using-parameter-text"

\end_inset

).
 First, create a text buffer in Blender, and name it 
\begin_inset Quotes eld
\end_inset

soya_params
\begin_inset Quotes erd
\end_inset

.
 This text buffer contains Soya-specific informations, given as 
\begin_inset Quotes eld
\end_inset

key=value
\begin_inset Quotes erd
\end_inset

 pairs.
 The following pairs are supported:
\end_layout

\begin_layout Description
scale=2.0 scales the Model (in the three directions).
\end_layout

\begin_layout Description
shadow=1 activate shadows on the Soya Model (use 0 for disabling shadow,
 which is the default; see picture below).
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename /home/jiba/src/soya/tutorial/results/modeling-shadow-1.jpeg
	width 30col%

\end_inset


\end_layout

\begin_layout Description
cellshading=1 activate the cellshading on the Soya Model (use 0 for disabling
 cellshading, which is the default).
 A cellshaded Model use a different, more cartoon-like, lighting algorithm,
 and can have an outline (see the picture below; the sword on the left has
 not cellshading enabled, the sword on the right has it).
\end_layout

\begin_layout Description
cellshading_shader="filename" the name of the Material used as the 
\begin_inset Quotes eld
\end_inset

shader
\begin_inset Quotes erd
\end_inset

 (defaults to soya.SHADER_DEFAULT_MATERIAL).
 Only the texture of the Material is used; it should be a 1-pixel-wide alpha
 texture.
 This texture is then added over the normal Model texture, with the top-most
 pixels being added over the darker parts of the Model and the bottom-most
 pixels over the bright parts.
\end_layout

\begin_layout Description
cellshading_outline_width=1.0 the width of the cellshading outline (default
 to 0.0, this parameter is used only if cellshading is activated).
 If the width is 0.0, no outline is added to the Model.
\end_layout

\begin_layout Description
cellshading_outline_color=red,green,blue,alpha the color of the cellshading
 outline (default to black, this parameter is used only if cellshading is
 activated).
\end_layout

\begin_layout Description
cellshading_outline_attenuation=0.3 the attenuation of the cellshading outline,
 with regard to the distance (defaults to 0.3).
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename /home/jiba/src/soya/tutorial/results/modeling-cellshading-1.jpeg
	width 30col%

\end_inset


\end_layout

\begin_layout Description
animation=blender_action_name the name of a Blender action; the corresponding
 action will be set current before exporting (defaults to None).
\end_layout

\begin_layout Description
animation_time=3.0 the frame number sets before exporting (this parameter
 is expected to be used with the animation one).
\end_layout

\begin_layout Description
max_face_angle=80.0 the maximum angle between two smooth-lit Faces.
 If the angle between two Faces is higher than the given value, the two
 Faces won't be considered as smooth (with regard to each other), even if
 they are marked as smooth in Blender.
 In other 3D engine (including Blender), you need to dupplicate vertices
 for disabling smoothing; however Soya takes into account the angle between
 each Face, and does that automatically for you.
 Default is 80.0; you can disable this feature by setting it to 360.0.
\end_layout

\begin_layout Description
keep_points_and_lines=1 if true, points and lines are kept in the Model
 (by default, Soya drops them, and keep only triangles and quads).
\end_layout

\begin_layout Description
material_oldname=newname replaces the Material named 
\begin_inset Quotes eld
\end_inset

oldname
\begin_inset Quotes erd
\end_inset

 by the Material named 
\begin_inset Quotes eld
\end_inset

newname
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Description
config_text=blender_text_buffer_name also read the Blender text buffer of
 the given name.
\end_layout

\begin_layout Description
config_file=file also read the given file (as if it was a parameter buffer).
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Generating-several-Soya"

\end_inset

Generating several Soya models from a single Blender file
\end_layout

\begin_layout Standard
The parameter text buffers named 
\begin_inset Quotes eld
\end_inset

soya_params
\begin_inset Quotes erd
\end_inset

 is always parsed.
 It is possible to export several Soya Model from a single Blender file,
 using additional parameter text buffers.
 In this case, the Model filename in Soya is 
\begin_inset Quotes eld
\end_inset

blender_filename@additional_parameter_text_buffers_name
\begin_inset Quotes erd
\end_inset

.
 For example, if you have a <data>/blender/sword.blend Blender model, with
 the following 
\begin_inset Quotes eld
\end_inset

soya_params
\begin_inset Quotes erd
\end_inset

 text buffer:
\end_layout

\begin_layout LyX-Code
cellshading=1
\end_layout

\begin_layout LyX-Code
cellshading_outline_width=1.0
\end_layout

\begin_layout Standard
the following text buffer called 
\begin_inset Quotes eld
\end_inset

big
\begin_inset Quotes erd
\end_inset

:
\end_layout

\begin_layout LyX-Code
scale=2.0
\end_layout

\begin_layout Standard
and the following text buffer called 
\begin_inset Quotes eld
\end_inset

blue
\begin_inset Quotes erd
\end_inset

:
\end_layout

\begin_layout LyX-Code
material_sword=sword_blue
\end_layout

\begin_layout Standard
Then,
\end_layout

\begin_layout Itemize
soya.Model.get("sword") loads the Model and parses only the 
\begin_inset Quotes eld
\end_inset

soya_params
\begin_inset Quotes erd
\end_inset

 buffer.
\end_layout

\begin_layout Itemize
soya.Model.get("sword@big") loads the Model and parses the 
\begin_inset Quotes eld
\end_inset

soya_params
\begin_inset Quotes erd
\end_inset

 and the 
\begin_inset Quotes eld
\end_inset

big
\begin_inset Quotes erd
\end_inset

 buffers, and thus scales the Model by 2.
\end_layout

\begin_layout Itemize
soya.Model.get("sword@blue") loads the Model and parses the 
\begin_inset Quotes eld
\end_inset

soya_params
\begin_inset Quotes erd
\end_inset

 and the 
\begin_inset Quotes eld
\end_inset

blue
\begin_inset Quotes erd
\end_inset

 buffers, and thus replaces the 
\begin_inset Quotes eld
\end_inset

sword
\begin_inset Quotes erd
\end_inset

 Material by the 
\begin_inset Quotes eld
\end_inset

sword_blue
\begin_inset Quotes erd
\end_inset

 Material.
\end_layout

\begin_layout Standard
The animation and animation_time can be used to generate several non-animated
 Model corresponding to the various frames of one or more Blender actions.
 For example, to generate a non-animated Model that is a statue of Balazar
 running, at the frame 2:
\end_layout

\begin_layout LyX-Code
animation=run
\end_layout

\begin_layout LyX-Code
animation_time=2.0
\end_layout

\begin_layout Section
Exporting Soya model to Blender
\end_layout

\begin_layout Standard
The script soya/soya2blender.py (in the Soya sources) can import a Soya Model
 in Blender.
 You have to modify the end of the script to choose the Model to import,
 and then run the script manually in Blender.
\end_layout

\begin_layout Description
Known
\begin_inset space ~
\end_inset

bug: It seems that soya2blender.py doesn't export texture well, so you'll
 have to re-set the texture.
\end_layout

\begin_layout Section
What about other 3D modelers ?
\end_layout

\begin_layout Standard
In addition to Blender, the following modelers are supported by Soya:
\end_layout

\begin_layout Itemize
3DSMax (see soya/_3DS2soya.py).
\end_layout

\begin_layout Itemize
MilkShake 3D (see ms3D2soya.py).
\end_layout

\begin_layout Itemize
OBJ/MTL (see objmtl2soya.py).
\end_layout

\begin_layout Chapter
Event handling
\end_layout

\begin_layout Section
Getting events
\end_layout

\begin_layout Standard
XXX Soya's event system is still quite primitive and need a rewrite.
\end_layout

\begin_layout Standard
soya.process_event() computes and returns all events that have occured since
 the last call to process_event.
\end_layout

\begin_layout Standard
An event is a tuple ; the first value of an event tuple is a constant from
 soya.sdlconst, and the following values depend of the event type.
 Event types are:
\end_layout

\begin_layout LyX-Code
(sdlconst.KEYDOWN, key, mods[, unicode_key])
\end_layout

\begin_layout LyX-Code
(sdlconst.KEYUP, key, mods)
\end_layout

\begin_layout LyX-Code
(sdlconst.MOUSEMOTION, x, y, x_relative, y_relative, state)
\end_layout

\begin_layout LyX-Code
(sdlconst.MOUSEBUTTONDOWN, button, x, y)
\end_layout

\begin_layout LyX-Code
(sdlconst.MOUSEBUTTONUP, button, x, y)
\end_layout

\begin_layout LyX-Code
(sdlconst.JOYAXISMOTION, axis, value)
\end_layout

\begin_layout LyX-Code
(sdlconst.JOYBUTTONDOWN, button)
\end_layout

\begin_layout LyX-Code
(sdlconst.JOYBUTTONUP, button)
\end_layout

\begin_layout LyX-Code
(sdlconst.VIDEORESIZE, width, height)
\end_layout

\begin_layout LyX-Code
(sdlconst.VIDEOEXPOSE)
\end_layout

\begin_layout LyX-Code
(sdlconst.QUIT)
\end_layout

\begin_layout Standard
unicode_key is present only if soya.set_use_unicode(1) has been called.
\end_layout

\begin_layout Section
Converting mouse 2D coordinates to 3D coordinates
\end_layout

\begin_layout Standard
Mouse coordinates are returned as pixel values by process_event().
 These 2D pixel values can be converted into 3D coordinates using Camera.coord2d_
to_3d(x, y, z = -1.0) -> Point.
 As mouse coordinates are2D, the Z value cannot be guessed; if not given,
 it default to -1.0.
 Remind that, if you want the mouse to be in front of the Camera, you need
 z < 0.0.
\end_layout

\begin_layout Standard
For example, you can use the following example to display a 3D cursor (see
 the mouse-1 tuto, and the raypicking-2 tuto for an example of drag-drop):
\end_layout

\begin_layout LyX-Code
class Cursor(soya.Body):
\end_layout

\begin_layout LyX-Code
  def __init__(self, parent, model = None):
\end_layout

\begin_layout LyX-Code
    soya.Body.__init__(self, parent, model)
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
  def begin_round(self):
\end_layout

\begin_layout LyX-Code
    soya.Body.begin_round(self)
\end_layout

\begin_layout LyX-Code
    for event in soya.process_event():
\end_layout

\begin_layout LyX-Code
      if event[0] == soya.sdlconst.MOUSEMOTION:
\end_layout

\begin_layout LyX-Code
        self.mouse_pos = camera.coord2d_to_3d(event[1], event[2], -15.0)
\end_layout

\begin_layout LyX-Code
        self.move(self.mouse_pos)
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename /home/jiba/src/soya/tutorial/results/mouse-1.jpeg
	width 30col%

\end_inset


\end_layout

\begin_layout Section
Converting 3D coordinates to 2D coordinates
\end_layout

\begin_layout Standard
3D coordinates can be converted to 2D pixel values using Camera.coord3d_to_2d(pos
ition) -> (x, y), where position is either a Point or a CoordSyst.
\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "cha:Sounds"

\end_inset

Sounds
\end_layout

\begin_layout Standard
Soya's sound API is very similar to the API for 3D objects.
\end_layout

\begin_layout Section
Loading sounds
\end_layout

\begin_layout Standard
Soya support currently the following sound file formats:
\end_layout

\begin_layout Itemize
WAV (through the Python wave module)
\end_layout

\begin_layout Itemize
OGG Vorbis (requires the PyOgg and PyVorbis Python module)
\end_layout

\begin_layout Standard
Sound files should be placed in your 
\family typewriter
<data>/sounds
\family default
 directory (see chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "cha:Managing-data"

\end_inset

).
 You can load a sound by doing:
\end_layout

\begin_layout LyX-Code
sound = soya.Sound.get("my_sound.wav")
\end_layout

\begin_layout Standard
Soya uses a kind of streaming to not have to read the whole sound file before
 starting playing.
 The Sound object contains only the sound raw data.
\end_layout

\begin_layout Section
Playing sounds: SoundPlayer
\end_layout

\begin_layout Standard
To play the Sound, you need to put it into a SoundPlayer, a subclass of
 CoordSyst that plays a Sound in a 3D environment (SoundPlayer is to Sound
 what Body is to Model):
\end_layout

\begin_layout LyX-Code
sound_player = soya.SoundPlayer(parent, sound)
\end_layout

\begin_layout Standard
That's all! The Sound will be played at the position of the SoundPlayer,
 and Soya will automatically take care of the Doppler effect.
 Moving the SoundPlayer (or his parent, of course) will move the source
 of the Sound; see the sound-1.py tutorial for an example.
 When the Sound is over, by default Soya automatically removes the SoundPlayer
 from its parent.
 To stop playing the Sound before the end, just remove manually the SoundPlayer
 from its parent.
\end_layout

\begin_layout Standard
To play a background music in loop, at no particular 3D position:
\end_layout

\begin_layout LyX-Code
sound_player = soya.SoundPlayer(parent, sound, loop = 1, play_in_3D = 0)
\end_layout

\begin_layout Description
Hint: the sound and play_in_3D attributes are currently read-only (this
 may change in the future), and thus you'll have to set them when calling
 the constructor.
\end_layout

\begin_layout Description
Hint: when a World containing a SoundPlayer is saved, Soya saves the current
 playing position.
 When the World will be loaded, the sound will restart 
\series bold
at (about) the same position
\series default
, and not at the beginning.
\end_layout

\begin_layout Description
Hint: as WAV files are not seekable though the wave Python module, loading
 SoundPlayer that are playing WAV can be slow, particularly for big file.
 As a consequence, you should prefer the OGG Vorbis format for big files
 like music.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Sound-related-init-parameters"

\end_inset

Sound initialization
\end_layout

\begin_layout Standard
soya.init accept the following optional sound-related parameters:
\end_layout

\begin_layout Description
sound is true to initialize 3D sound support (default to false for backward
 compatibility).
\end_layout

\begin_layout Description
sound_device is the OpenAL device names, the default value should be nice
 (default tries native, esd, sdl, alsa, arts, and null devices, in order).
\end_layout

\begin_layout Description
soud_frequency is the sound frequency, in Hz (defaults to 44100).
\end_layout

\begin_layout Description
sound_reference_distance is the reference distance for sound attenuation
 (defaults to 1.0).
 Increase this value if you find that sounds far from the cameraare too
 much attenuated.
\end_layout

\begin_layout Description
sound_doppler_factor can be used to increase or decrease the Doppler effect
 (defaults to 0.01, which sounds a nice value).
\end_layout

\begin_layout Standard
Additionally, the set_sound_volume function can be used to control the global
 sound volume, ranging from 0.0 (no sound) to 1.0 (default and maximum value):
\end_layout

\begin_layout LyX-Code
soya.set_sound_volume(0.5)
\end_layout

\begin_layout Standard
Use soya.get_sound_volume() to get the current sound volume.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Sound-and-multiple-Cameras"

\end_inset

Sound and multiple Cameras
\end_layout

\begin_layout Standard
Soya uses the Camera as the 
\begin_inset Quotes eld
\end_inset

ear
\begin_inset Quotes erd
\end_inset

 from which sounds are listened.
 However, you can have only a single 
\begin_inset Quotes eld
\end_inset

ear
\begin_inset Quotes erd
\end_inset

 at the same time.
 If you have several Cameras, you have to choose the one that will act as
 the 
\begin_inset Quotes eld
\end_inset

ear
\begin_inset Quotes erd
\end_inset

.
 This can be done through the listen_sound attribute of the Camera: if this
 attribute is false, the Camera doesn't act as a 
\begin_inset Quotes eld
\end_inset

ear
\begin_inset Quotes erd
\end_inset

 (the default value is true):
\end_layout

\begin_layout LyX-Code
camera.listen_sound = 0
\end_layout

\begin_layout Section
Object reference
\end_layout

\begin_layout Subsection
Sound
\end_layout

\begin_layout Standard
Inherits from: 
\series bold
SavedInAPath
\series default
.
\end_layout

\begin_layout Standard
Loading Sounds:
\end_layout

\begin_layout Description
Sound.get(filename)
\begin_inset space ~
\end_inset

->
\begin_inset space ~
\end_inset

Sound loads a Sound from the <data>/sounds/ directory; filename should include
 the sound extension (
\emph on
e.g.

\emph default
 .wav or .ogg).
\end_layout

\begin_layout Standard
Noticeable attributes are:
\end_layout

\begin_layout Description
filename the sound's filename (relative to the <data>/sounds/ directory).
\end_layout

\begin_layout Description
stereo is true if the sound is stereo, and false if the sound is mono.
\end_layout

\begin_layout Subsection
SoundPlayer
\end_layout

\begin_layout Standard
Inherits from: 
\series bold
CoordSyst
\series default
.
\end_layout

\begin_layout Standard
Constructor is:
\end_layout

\begin_layout Description
SoundPlayer(parent,
\begin_inset space ~
\end_inset

sound,
\begin_inset space ~
\end_inset

loop,
\begin_inset space ~
\end_inset

play_in_3D,
\begin_inset space ~
\end_inset

gain,
\begin_inset space ~
\end_inset

auto_remove)
\begin_inset space ~
\end_inset

->
\begin_inset space ~
\end_inset

SoundPlayer the parameters directly match the attributes.
\end_layout

\begin_layout Standard
Noticeable attributes are:
\end_layout

\begin_layout Description
sound is the Sound to play (read-only).
\end_layout

\begin_layout Description
loop if true, the sound restarts from the beginning when it ends (defaults
 to false).
\end_layout

\begin_layout Description
play_in_3D if true, the sound is played as a 3D sound; if false, as a 2D
 sound (read-only; defaults to true).
 Notice that OpenAL cannot play stereo sound in 3D, and you'll get an error
 if you try that.
\end_layout

\begin_layout Description
gain is the volume of the Sound, ranging from 0.0 to 1.0 (default 1.0).
\end_layout

\begin_layout Description
auto_remove if true, the SoundPlayer is automatically removed when the sound
 ends (excepted in cases of looping!, defaults to true)
\end_layout

\begin_layout Standard
Noticeable methods are:
\end_layout

\begin_layout Description
ended() this method is called when the sound is over.
 You may override it; the default implementation removes the SoundPlayer
 from its parent if its auto_remove attribute is true.
\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "cha:Collision-detection-and-physics"

\end_inset

Collision detection and physics
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Raypicking"

\end_inset

Raypicking
\end_layout

\begin_layout Section
Collision (ODE support)
\end_layout

\begin_layout Section
Physic engine
\end_layout

\begin_layout Section
Object reference
\end_layout

\begin_layout Chapter
Advanced Soya objects
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Terrain"

\end_inset

Terrain
\end_layout

\begin_layout Subsection
Basics
\end_layout

\begin_layout Subsection
Generating your own terrain
\end_layout

\begin_layout Section
Particle systems
\end_layout

\begin_layout Section
Traveling camera
\end_layout

\begin_layout Section
Sprites
\end_layout

\begin_layout Section
Portal
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Atmosphere"

\end_inset

Atmosphere
\end_layout

\begin_layout Subsection
Basic Atmosphere
\end_layout

\begin_layout Subsection
NoBackgroundAtmosphere
\end_layout

\begin_layout Subsection
SkyAtmosphere
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Model-Deforms"

\end_inset

Deforming Models
\end_layout

\begin_layout Section
Object reference
\end_layout

\begin_layout Subsection
Terrain
\end_layout

\begin_layout Subsection
ParticleSystem
\end_layout

\begin_layout Subsection
TravelingCamera
\end_layout

\begin_layout Subsection
Traveling
\end_layout

\begin_layout Subsection
ThirdPersonTraveling
\end_layout

\begin_layout Subsection
Sprite
\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Portal"

\end_inset

Portal
\end_layout

\begin_layout Subsection
Atmosphere
\end_layout

\begin_layout Subsection
SkyAtmosphere
\end_layout

\begin_layout Subsection
Deform
\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "cha:Modeling"

\end_inset

Modeling
\end_layout

\begin_layout Standard
The Soya modelling system allows to create Soya model from Python code,
 without using Blender or any other 3D modeller.
 It is also used for writing exporters for 3D modellers.
\end_layout

\begin_layout Standard
Soya Model are created by putting several Faces (triangles or quads) in
 a World, and then converting the World into a Model
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Materials"

\end_inset

Materials
\end_layout

\begin_layout Standard
A material
\end_layout

\begin_layout Section
Basic Models: cube and sphere
\end_layout

\begin_layout Standard
The soya.cube and soya.sphere module provide functions for creating cube and
 sphere.
 These functions simply call lower lower functions for creating cubic or
 pherical models.
\end_layout

\begin_layout Section
Faces and vertices
\end_layout

\begin_layout Standard
In Soya, each model is made of Faces.
\end_layout

\begin_layout Section
Modelifiers
\end_layout

\begin_layout Description
Warning: Only triangles or quads are supported; lines, points or more complex
 faces are not.
\end_layout

\begin_layout Section
Static lighting
\end_layout

\begin_layout Section
Object reference
\end_layout

\begin_layout Subsection
Image
\end_layout

\begin_layout Subsection
Material
\end_layout

\begin_layout Subsection
Vertex
\end_layout

\begin_layout Subsection
Face
\end_layout

\begin_layout Subsection
ModelBuilder
\end_layout

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "cha:Widget-systems"

\end_inset

Font, text, and widget systems
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Fonts-and-text"

\end_inset

Fonts and text drawing
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Widgets"

\end_inset

Widgets
\end_layout

\begin_layout Section
Pudding
\end_layout

\begin_layout Section
Object reference
\end_layout

\begin_layout Subsection
Font
\end_layout

\begin_layout Subsection
Label3D
\end_layout

\begin_layout Chapter
Tofu network and game engine
\end_layout

\begin_layout Standard
Tofu is a client-server network and game engine for Soya.
 Main features are:
\end_layout

\begin_layout Itemize
single and multi-player mode,
\end_layout

\begin_layout Itemize
interpolation of character animation and position,
\end_layout

\begin_layout Itemize
persistent world support,
\end_layout

\begin_layout Itemize
a player can control one or several characters,
\end_layout

\begin_layout Itemize
one or several players can play with the same client (see figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Tofu-client-server-model"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename client_server.eps
	lyxscale 50
	width 40col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Tofu-client-server-model"

\end_inset

Tofu client-server model
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Principles
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Subsection
Players, PlayerID, Mobiles, Levels
\end_layout

\begin_layout Description
Players are the human players.
 The Player class represent the human player, and thus it is used 
\series bold
never
\series default
 used client-side, since the client doesn't have the player data.
\end_layout

\begin_layout Description
PlayerIDs are used to identify Players.
 Contrary to Players, PlayerIDs are available both at client and server-side.
 The default PlayerID class provides only two attributes: filename (which
 is the name of the Player) and password.
 You may extend the class with additional attributes, such as the character
 the Player has chosen (
\emph on
e.g.

\emph default
 Tux, Gnu, and so on).
 A new Player is automatically created when a new filename is given.
\end_layout

\begin_layout Description
Mobiles are every objects that can move or that may be changed during the
 game.
 In particular, the chararacters the Player plays are Mobiles.
 Bots, 
\emph on
i.e.

\emph default
 characters played by the computer, are also Mobiles.
 Mobile inherits from soya.World.
\end_layout

\begin_layout Description
Levels are a part of the game's universe.
 A Mobile is located in a single level at a given time.
 Levels inherits from soya.World.
\end_layout

\begin_layout Description
Uniques are objects that have a unique identifier (UID), which can be used
 to identify the object on the server or any client.
 The UID can be acessed by the uid attribute.
 Mobiles and Levels are Uniques.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename player_mobile_level.eps
	lyxscale 50
	width 50col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Players,-Mobiles-and-Levels"

\end_inset

Players, Mobiles and Levels
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Actions, messages and states
\end_layout

\begin_layout Standard
In client-server mode, Tofu sends various information over the network in
 order to maintain the state of the Mobiles identical on the server and
 on each client.
 Tofu distinguishes three types of information (see figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Action,-state-and-message"

\end_inset

):
\end_layout

\begin_layout Description
Actions are the action the human player or a bot decide to perform.
 Human player actions are generated by the client (by reading 
\emph on
e.g.

\emph default
 the keyboard events) and sent to the server.
 Examples are: start jumping, start walking, stop walking,...
 Many actions are given as 
\begin_inset Quotes eld
\end_inset

start
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

stop something
\begin_inset Quotes erd
\end_inset

, in order to reduce the amount of actions sent.
\end_layout

\begin_layout Description
Messages are information sent by the server to the clients.
 Messages are only rarely used, in particular they should not be used for
 sending positionning information, or any other information that evolves
 often.
 Examples are information about life lost, or a bonus taken.
\end_layout

\begin_layout Description
States are also information sent by the server to the clients.
 Contrary to messages, states are for information that evolves so quickly
 that it is not possible to send all the information.
 Usually, states are used only for position and orientation of the characters.
 As a consequence, states are interpolated when needed.
\end_layout

\begin_layout Standard
Actions, messages and states are not classes; Tofu just uses raw strings
 for them.
\end_layout

\begin_layout Standard
For sending information, Tofu uses a mix of TCP and UDP sockets (For those
 that are not specialists in network, like me, TCP and UDP are two network
 protocols.
 The main difference between them is that, with TCP, you are garanteered
 that the data sent over the network arrives, whereas with UDP, the data
 may never arrive.
 However, UDP is faster).
 Tofu sends actions and messages with TCP, and states with UDP.
 If a state is lost, it will be counterweighed by interpolation.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename action_message_state.eps
	lyxscale 75
	width 50col%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Action,-state-and-message"

\end_inset

Actions, states and messages
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Persistence: Data path and game path
\end_layout

\begin_layout Standard
Tofu automatically saves the game data using Cerealizer with it is shut
 down.
\end_layout

\begin_layout Standard
With Tofu, there is two path for saving data.
 
\series bold
The normal Soya path
\series default
 is used to load Images, Materials, Models, Worlds, Fonts, Sounds,...
 as usual.
 It is also used for loading new unmodified Levels, 
\emph on
i.e.

\emph default
 when a player enters in the level for the first time.
\end_layout

\begin_layout Standard

\series bold
The Tofu game path
\series default
 is used for loading and saving players and modified levels, 
\emph on
i.e.

\emph default
 levels saved after a player enters in it and possibly alter the level.
 The game path is obtained by joining tofu.SAVED_GAME_DIR and tofu.GAME.
 tofu.SAVED_GAME_DIR is the directory where all games are saved, and tofu.GAME
 is the subdirectory where the current game is saved.
\end_layout

\begin_layout Standard
These variables can be used in various ways:
\end_layout

\begin_layout Description
In
\begin_inset space ~
\end_inset

single
\begin_inset space ~
\end_inset

player
\begin_inset space ~
\end_inset

mode one usually wants a game per player, which can be obtained by using
 the player name as the game name.
\end_layout

\begin_layout Description
In
\begin_inset space ~
\end_inset

single
\begin_inset space ~
\end_inset

client-server
\begin_inset space ~
\end_inset

mode :
\end_layout

\begin_deeper
\begin_layout Description
For
\begin_inset space ~
\end_inset

persistent
\begin_inset space ~
\end_inset

universe a single game is needed (use any name of your choice).
\end_layout

\begin_layout Description
For
\begin_inset space ~
\end_inset

game
\begin_inset space ~
\end_inset

with
\begin_inset space ~
\end_inset


\begin_inset Quotes eld
\end_inset

match
\begin_inset Quotes erd
\end_inset

 a game is required for each match.
\end_layout

\end_deeper
\begin_layout Standard
However, notice that a Tofu server cannot manage several games at a time.
 For instance, for a game with 
\begin_inset Quotes eld
\end_inset

match
\begin_inset Quotes erd
\end_inset

, you have to run one server for each match.
\end_layout

\begin_layout Subsection
Single player, server and client modes
\end_layout

\begin_layout Standard
With Tofu, the 
\series bold
same
\series default
 code is used for single player, server and client modes.
 This eases game programming, because you have a single program to write.
\end_layout

\begin_layout Standard
You can switch to any mode, by calling tofu.set_side("single"), tofu.set_side("ser
ver") or tofu.set_side("client").
\end_layout

\begin_layout Section
Using the Tofu network engine
\end_layout

\begin_layout Subsection
Setting up
\end_layout

\begin_layout Standard
First, you need to import Soya, Tofu and Cerealizer, and to define soya.path
 and tofu.SAVED_GAME_DIR (in a real game, you'll probably want to make tofu.SAVED_
GAME_DIR user-configurable, 
\emph on
e.g.

\emph default
 by reading it from a configuration file; here we use a temporary directory
 for tutorial purpose).
\end_layout

\begin_layout LyX-Code
import sys, os, os.path
\end_layout

\begin_layout LyX-Code
import soya, soya.tofu as tofu, cerealizer
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
soya.path.append(os.path.join(os.path.dirname(sys.argv[0]), "data"))
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
tofu.SAVED_GAME_DIR = "/tmp/tofu_demo"
\end_layout

\begin_layout Description
Warning: Tofu automatically imports and enables Cerealizer, and disables
 Pickle (see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:File-formats"

\end_inset

) for security reasons; as a consequence, 
\series bold
all Soya data files MUST be in the Cerealizer file format!
\end_layout

\begin_layout Subsection
Creating the PlayerID class
\end_layout

\begin_layout Standard
The PlayerID class is used to identify Players.
 The default tofu.PlayerID has just a filename (
\emph on
i.e.

\emph default
 the player's name) and a password.
 If you need additional attributes, you can extend PlayerID.
 For example, for adding a character_name attribute:
\end_layout

\begin_layout LyX-Code
class PlayerID(tofu.PlayerID):
\end_layout

\begin_layout LyX-Code
  def __init__(self, filename, password, character_name = "tux"):
\end_layout

\begin_layout LyX-Code
    tofu.PlayerID.__init__(self, filename, password)
\end_layout

\begin_layout LyX-Code
    self.character_name = character_name
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
  def dumps(self):
\end_layout

\begin_layout LyX-Code
    return "%s%s
\backslash
n%s" % (tofu.PlayerID.dumps(self), len(self.character_name), self.character_name)
        
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
  @classmethod
\end_layout

\begin_layout LyX-Code
  def loads(Class, s):
\end_layout

\begin_layout LyX-Code
    self = tofu.PlayerID.loads(Class, s)
\end_layout

\begin_layout LyX-Code
    length = int(s.readline())
\end_layout

\begin_layout LyX-Code
    self.character_name = s.read(length)
\end_layout

\begin_layout LyX-Code
    return self
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
tofu.LOAD_PLAYER_ID = PlayerID.loads
\end_layout

\begin_layout Standard
The dumps method returns the PlayerID saved in a string, and the loads class
 method returns a PlayerID loaded from a file object s.
 The loads class method must be given to Tofu in the global variable tofu.LOAD_PL
AYER_ID.
\end_layout

\begin_layout Standard
You may also use Cerealizer for saving and loading PlayerID.
 It is very handy for test, but should be avoided, because it might comprise
 the server security (Tofu uses Cerealizer only in the server->client direction,
 whereas PlayerIDs are sent from client to server.
 By sending e.g.
 Unique or SavedInAPath objects with the PlayerID, one might corrupt the
 game currenlty played on the server).
 To use Cerealizer, use the following dumps and loads methods:
\end_layout

\begin_layout LyX-Code
  def dumps(self): return cerealizer.dumps(self)
\end_layout

\begin_layout LyX-Code
  @classmethod
\end_layout

\begin_layout LyX-Code
  def loads(Class, s): return cerealizer.load(s)
\end_layout

\begin_layout Subsection
Creating the Player class
\end_layout

\begin_layout Standard
The Player class is used for representing the Player in server and single
 modes.
 Player is responsible for creating the Player first Mobiles, and putting
 them in the right Levels.
 Player can also stores Player stats, like score, that are managed on server-sid
e.
\end_layout

\begin_layout Standard
When created, Player receive a PlayerID.
 Here is an example of a basic Player class:
\end_layout

\begin_layout LyX-Code
class Player(tofu.Player):
\end_layout

\begin_layout LyX-Code
  def __init__(self, player_id):
\end_layout

\begin_layout LyX-Code
    tofu.Player.__init__(self, player_id)
\end_layout

\begin_layout LyX-Code
    
\end_layout

\begin_layout LyX-Code
    mobile = Mobile()
\end_layout

\begin_layout LyX-Code
    mobile.level = tofu.Level.get("first_level")
\end_layout

\begin_layout LyX-Code
    mobile.set_xyz(100.0, 0.0, 100.0)
\end_layout

\begin_layout LyX-Code
    self.add_mobile(mobile)
\end_layout

\begin_layout LyX-Code
    
\end_layout

\begin_layout LyX-Code
tofu.CREATE_PLAYER = Player
\end_layout

\begin_layout LyX-Code
cerealizer.register(Player, soya.cerealizer4soya.SavedInAPathHandler(Player))
\end_layout

\begin_layout Standard
This Player class creates a single Mobile, and puts it in the Level called
 
\begin_inset Quotes eld
\end_inset

first_level
\begin_inset Quotes erd
\end_inset

, at the given coordinates.
 Player.add_mobile(mobile) gives the control of the Mobile to the Player.
 Your Player class must be cerealizable.
\end_layout

\begin_layout Description
Warning: You must not call Level.add_mobile (see below) in the Player class.
 Level.add_mobile will be automatically called when the Player logs in.
\end_layout

\begin_layout Standard
The following methods may be overriden in the Player class:
\end_layout

\begin_layout Description
add_mobile(mobile) is called when the player gets the control of a new mobile
\end_layout

\begin_layout Description
remove_mobile(mobile) is called when the player loose the control of a mobile
 (for example because the Mobile is dead)
\end_layout

\begin_layout Description
login(socket,
\begin_inset space ~
\end_inset

udp_address) is called when the Player connects to the game
\end_layout

\begin_layout Description
logout(save=1) is called when the Player disconnects from the game ; the
 save argument indicates wether the Player should be saved or not.
\end_layout

\begin_layout Description
killed(save=0) is called when the Player no longer controls any Mobile,
 and thus is considered as dead.
 The save argument indicates wether the Player should be saved or not; it
 defaults to false.
\end_layout

\begin_layout Subsection
Creating the MainLoop class
\end_layout

\begin_layout Standard
Tofu provides a MainLoop that extends Soya's MainLoop with everything required
 for networking.
 The following methods can be overriden:
\end_layout

\begin_layout Description
init_interface() is called when the game is starting, in single or client
 mode.
 It can be used for setting up the game interface, for example for creating
 a camera and a life-bar widget.
\end_layout

\begin_layout Subsection
Creating the Level class
\end_layout

\begin_layout Standard
The Level class represents a game Level.
 It inherits from soya.World and tofu.Unique, and you have to extend this
 class.
 Your Level class must be cerealizable.
\end_layout

\begin_layout LyX-Code
class Level(tofu.Level):
\end_layout

\begin_layout LyX-Code
  def __init__(self):
\end_layout

\begin_layout LyX-Code
    tofu.Level.__init__(self)
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
cerealizer.register(Level, soya.cerealizer4soya.SavedInAPathHandler(Level))
\end_layout

\begin_layout Standard
The following methods can be overriden:
\end_layout

\begin_layout Description
add_mobile(mobile) is called when a mobile is added in the Level
\end_layout

\begin_layout Description
remove_mobile(mobile) is called when a mobile is removed from the Level
\end_layout

\begin_layout Description
set_active(active) is called when the Level is activated (active is true)
 or inactivated (active is false).
 A level is considered as active if and only if there is at least one Mobile
 controlled by a human Player in the Level.
\end_layout

\begin_layout Subsection
Creating the Mobile class
\end_layout

\begin_layout Standard
The Mobile class represents anything that evolves or changes in a Level.
 In particular, this definition includes the characters controlled by the
 Player, as well as bots (characters controlled by computer) and several
 traps (such as moving platforms).
 Mobile inherits from soya.World and tofu.Unique, and you have to extend this
 class.
 Your Mobile classes must be cerealizable.
\end_layout

\begin_layout Standard
Mobile has the following interesting attributes:
\end_layout

\begin_layout Description
bot true if the Mobile is a bot, 
\emph on
i.e.

\emph default
 the Mobile is controlled by a computer and not a Player.
\end_layout

\begin_layout Description
local true if the Mobile is controlled locally, and not by a remote server
 or client.
\end_layout

\begin_layout Description
player_name the filename of the Player that controls the Mobile, if any.
 For bots, an empty string.
\end_layout

\begin_layout Description
level the Level the Mobile is inside.
\end_layout

\begin_layout Subsubsection
Owning and loosing control
\end_layout

\begin_layout Standard
A Mobile can be controlled by different Player or computer during its life.
 To give the control of a Mobile to a Player, call Player.add_mobile(mobile);
 and call Player.remove_mobile(mobile) for removing the control and turning
 the Mobile into a bot.
 In client-server mode, Player.add_mobile and Player.remove_mobile must be
 called server-side, usually it is called in Mobile.do_collision().
\end_layout

\begin_layout Standard
The following methods are related to the control transfert, and should be
 overriden:
\end_layout

\begin_layout Description
control_owned() is called when the current program gets the control of the
 Mobile, 
\emph on
i.e.

\emph default
 Mobile.local becomes true.
 For example, if the Mobile is controlled by a local Player (
\emph on
i.e.

\emph default
 if Mobile.bot is false), this method can be overriden in order to makes
 the Camera following and looking at the Mobile.
\end_layout

\begin_layout Description
control_lost() is called when the current program loose the control of the
 Mobile, 
\emph on
i.e.

\emph default
 Mobile.local becomes false.
\end_layout

\begin_layout Subsubsection
Generating actions
\end_layout

\begin_layout Standard
Actions are the action the human player or a bot decide to perform.
 Actions are generated on client-side for Mobile controlled by human Players,
 and on server-side for bots.
\end_layout

\begin_layout Standard
Tofu doesn't have an action class; actions are simply represented by raw
 string.
 For instance, you can use 
\begin_inset Quotes eld
\end_inset

<
\begin_inset Quotes erd
\end_inset

 for representing the 
\begin_inset Quotes eld
\end_inset

start turning left
\begin_inset Quotes erd
\end_inset

 action, 
\begin_inset Quotes eld
\end_inset

>
\begin_inset Quotes erd
\end_inset

 for 
\begin_inset Quotes eld
\end_inset

start turning right
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

J
\begin_inset Quotes erd
\end_inset

 for 
\begin_inset Quotes eld
\end_inset

start jumping
\begin_inset Quotes erd
\end_inset

, and so on.
 More complex action examples can be 
\begin_inset Quotes eld
\end_inset

U12
\begin_inset Quotes erd
\end_inset

 for 
\begin_inset Quotes eld
\end_inset

use the magical item of UID 12
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
The following methods are used for generating actions:
\end_layout

\begin_layout Description
generate_actions() is called every round, and is in charge of generating
 the actions for the Mobile.
 You have to override this method, in order to generate actions from keyboard
 and mouse events (for Mobiles controlled by human Players) or artificial
 intelligence (for bots).
 When actions are generated, you must call send_action(action) for each
 of them (you can call send_action() several time in generation_actions()).
\end_layout

\begin_layout Description
send_action(action) sends the given action.
 The action argument must be a string.
\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Doing-actions"

\end_inset

Doing actions
\end_layout

\begin_layout Standard
Actions are performed sever-side, by the following method that must be overriden
:
\end_layout

\begin_layout Description
do_action(action) is called for every action.
 The action argument is the string that generate_actions() has given to
 send_action().
 For instance, if the action is 
\begin_inset Quotes eld
\end_inset

J
\begin_inset Quotes erd
\end_inset

 and corresponds to 
\begin_inset Quotes eld
\end_inset

start jumping
\begin_inset Quotes erd
\end_inset

, do_action() should modify the Mobile speed, in order to make it jump.
\end_layout

\begin_layout Standard
When the current state of the object has been modified, you should call
 the following method:
\end_layout

\begin_layout Description
set_current_state_importance(importance) sets the importance of the current
 Mobile state.
 In client-server mode, the importance is used as a hint for determining
 which states should be sent through network.
 Importance can be 0 (no importance at all), 1 (small importance, corresponding
 to a change that the client is able to interpolate) or 2 (important change,
 requiring to send a state as soon as possible).
\end_layout

\begin_layout Subsubsection
Generating and applying states
\end_layout

\begin_layout Standard
In client-server mode, states are send from the server to the client.
 The state usually indicates the position and the orientation of the Mobile.
 However, a state is not sent for each round.
 Tofu automatically determines for which round a state is sent, using the
 values given to set_current_state_importance() as hints.
\end_layout

\begin_layout Standard
The following methods are related to states and must be overriden:
\end_layout

\begin_layout Description
get_network_state() is called on server-side when Tofu decides to send a
 state.
 It should returns the states of the Mobile, as a string.
\end_layout

\begin_layout Description
read_network_state(file_object) is called on client-side when Tofu receives
 a state.
 It should read the states from the given file object.
\end_layout

\begin_layout Subsubsection
Dealing with physics
\end_layout

\begin_layout Standard
Physics computation is performed both client and server side.
 In client mode, do_physics is in charge of interpolating between states.
\end_layout

\begin_layout Standard
You must override the following method:
\end_layout

\begin_layout Description
do_physics() is called every round, and is in charge of doing physics computatio
n.
 For instance, if the Mobile is jumping and thus has a positive vertical
 speed, do_physics should apply the vertical speed.
\end_layout

\begin_layout Subsubsection
Dealing with collisions
\end_layout

\begin_layout Standard
Collisions we are speaking about here are collisions between Mobiles, or
 important collision that must be handled server-side.
 Normal 
\begin_inset Quotes eld
\end_inset

collision
\begin_inset Quotes erd
\end_inset

, like a collision with a static wall, can be dealt with during the physics
 step.
\end_layout

\begin_layout Description
do_collisions() is called every round, and is in charge of checking important
 collisions.
 Important collisions include collision between two Mobiles (
\emph on
e.g.

\emph default
 a character Mobile touching and taking a bonus Mobile, or two characters
 colliding), or any collision that has an influence on the game (loosing
 life point, being teleported to a new Level,...).
\end_layout

\begin_layout Standard
In do_collision, you may want to call set_current_state_importance() too
 (see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Doing-actions"

\end_inset

).
\end_layout

\begin_layout Standard
Changing the Level of a Mobile should occur in do_collision.
 It can be done as following:
\end_layout

\begin_layout LyX-Code
mobile.level.remove_mobile(mobile)
\end_layout

\begin_layout LyX-Code
new_level.add_mobile(mobile)
\end_layout

\begin_layout Subsubsection
Generating messages
\end_layout

\begin_layout Standard
Message are similar to action, but they are sent from the server to the
 clients.
 Messages often results from do_collision(), for example if a Mobile has
 taken a life bonus, all clients must be informed that the Mobile's life
 has increased.
 This can be done through message.
\end_layout

\begin_layout Standard
The following method is used for sending a message:
\end_layout

\begin_layout Description
send_message(message) sends the given message.
 The message argument must be a string, 
\emph on
e.g.

\emph default
 you may use 
\begin_inset Quotes eld
\end_inset

L9
\begin_inset Quotes erd
\end_inset

 as a message meaning 
\begin_inset Quotes eld
\end_inset

the number of life of the Mobile is now 9
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Subsubsection
Doing messages
\end_layout

\begin_layout Standard
Messages are performed both client-side and server-side, by the following
 method that must be overriden:
\end_layout

\begin_layout Description
do_message(message) is called for every message.
 The message argument is the string that has been given to send_message().
 For instance, if the message is 
\begin_inset Quotes eld
\end_inset

L9
\begin_inset Quotes erd
\end_inset

 and corresponds to 
\begin_inset Quotes eld
\end_inset

the number of life is now 9
\begin_inset Quotes erd
\end_inset

, do_message() may update a lifebar.
\end_layout

\begin_layout Subsubsection
Conclusion
\end_layout

\begin_layout Standard
The following table indicates which methods is called on which mode.
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="13" columns="4">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
methods (*= called every round)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
single mode
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
server mode
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
client mode
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
control_owned
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
control_lost
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
generate_actions (*)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X (for bots)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X (for human player)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
send_action
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
do_action
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
do_physics (*)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
set_current_state_importance
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
get_network_state
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
read_network_state
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
do_collisions (*)
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
send_message
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
do_message
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
X
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
Tofu default implementations
\end_layout

\begin_layout Standard
Tofu provides several default Mobile implementations with interpolation:
\end_layout

\begin_layout Paragraph
SpeedInterpolatedMobile
\end_layout

\begin_layout Standard
is a Mobile that has is moved according to a speed.
\end_layout

\begin_layout Standard
The speed is not just a vector, but a CoordSystSpeed, a special object that
 implement a 
\begin_inset Quotes eld
\end_inset

speed matrix
\begin_inset Quotes erd
\end_inset

.
 Any modification applied to the speed will be performed on the Mobile 
\series bold
every rounds
\series default
.
 For example, for making the Mobile go forward:
\end_layout

\begin_layout LyX-Code
mobile.speed.z = -0.1
\end_layout

\begin_layout Standard
For making the Mobile turning:
\end_layout

\begin_layout LyX-Code
mobile.speed.turn_y(10.0)
\end_layout

\begin_layout Standard
To stop the Mobile, just reset the speed:
\end_layout

\begin_layout LyX-Code
mobile.speed.z = 0.0
\end_layout

\begin_layout LyX-Code
mobile.reset_orientation_and_scaling()
\end_layout

\begin_layout Standard
SpeedInterpolatedMobile has the following noticeable attributes:
\end_layout

\begin_layout Description
speed the speed (see above).
\end_layout

\begin_layout Description
last_state the last state of the Mobile.
 last_state is a CoordSystState object, which has a position but also an
 orientation and a scaling.
\end_layout

\begin_layout Description
next_state the next state of the Mobile, 
\emph on
i.e.

\emph default
 the state it will after at the end of the current round.
 next_state is a CoordSystState object.
 next_state is often used for collision detection in do_physics.
\end_layout

\begin_layout Paragraph
AnimatedMobile
\end_layout

\begin_layout Standard
AnimatedMobile is a Mobile that uses animations from an AnimatedModel.
 The current animation is automatically sent through network using states.
\end_layout

\begin_layout Standard
AnimatedMobile has the following attributes:
\end_layout

\begin_layout Description
animable the object that is animated and has an AnimatedModel.
 If not given, it defaults to the Mobile itself.
 You can use a different object by setting the 
\begin_inset Quotes eld
\end_inset

animable
\begin_inset Quotes erd
\end_inset

 attribute to any other Body.
\end_layout

\begin_layout Standard
AnimatedMobile has the following method:
\end_layout

\begin_layout Description
set_animation(animation) starts playing the given animation, and stops playing
 the previous one.
\end_layout

\begin_layout Paragraph
RaypickCollidedMobile
\end_layout

\begin_layout Standard
RaypickCollidedMobile is a Mobile that uses raypicking for basic collision
 detection (walls and ground).
\end_layout

\begin_layout Paragraph
RaypickCollidedMobileWithGravity
\end_layout

\begin_layout Standard
Same as RaypickCollidedMobile, but with gravitational force.
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features>
<column alignment="left" valignment="top" width="0">
<column alignment="left" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
game examples
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Mobile classes to extend
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
a racing game
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SpeedInterpolatedMobile, RaypickCollidedMobileWithGravity
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
a spatial simulation
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SpeedInterpolatedMobile, RaypickCollidedMobile
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
a character-based game
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SpeedInterpolatedMobile, RaypickCollidedMobileWithGravity, AnimatedMobile
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
Starting the game
\end_layout

\begin_layout Section
About Tofu sources
\end_layout

\begin_layout Standard
Tofu sources are entirey in Python.
 The source (ab)uses of a technic I called 
\begin_inset Quotes eld
\end_inset

side-oriented programming
\begin_inset Quotes erd
\end_inset

, which defined in the soya.tofu.sides module.
 When a method is prefixed by 
\begin_inset Quotes eld
\end_inset

@side("XXX")
\begin_inset Quotes erd
\end_inset

 (where XXX is single, server, client, or any combination of them), it means
 that the method exists only in the corresponding modes.
 The implementation of side-programming itself is in sides.py.
\end_layout

\begin_layout Section
Object reference
\end_layout

\begin_layout Chapter
Using Soya with...
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:External-GUI-systems"

\end_inset

External GUI systems (Tk, Wx,...)
\end_layout

\begin_layout Standard
Many GUI systems provide their own main loop.
 In this case, you should create the Soya's MainLoop object as usual, but
 instead of calling 
\family typewriter
MainLoop.main_loop()
\family default
, you should call 
\family typewriter
MainLoop.update()
\family default
 repeatedly, usually in a kind of timer, if possible about once per 25 or
 30 millisceonds.
 
\family typewriter
MainLoop.update
\family default
 manages time similarly than 
\family typewriter
MainLoop.main_loop
\family default
, but it cannot regulate time, as a consequence, you should use 
\family typewriter
MainLoop.main_loop
\family default
 whenever possible.
\end_layout

\begin_layout Subsection
Tkinter
\end_layout

\begin_layout Standard
Using Tkinter, this can be done as following, with 
\family typewriter
after
\family default
:
\end_layout

\begin_layout LyX-Code
class Window(Tkinter.Tk):
\end_layout

\begin_layout LyX-Code
    def __init__(self):
\end_layout

\begin_layout LyX-Code
        Tkinter.Tk.__init__(self)
\end_layout

\begin_layout LyX-Code
        self.after(30, self.update_soya)
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout LyX-Code
    def update_soya(self):
\end_layout

\begin_layout LyX-Code
        self.after(30, self.update_soya)
\end_layout

\begin_layout LyX-Code
        soya.MAIN_LOOP.update()
\end_layout

\begin_layout Standard
See tutorial soya-with-tk-1.py for an example.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:PyGame"

\end_inset

PyGame
\end_layout

\begin_layout Standard
Using Soya on PyGame surface is possible, by initializing first the PyGame
 surface, and the initializing Soya as following:
\end_layout

\begin_layout LyX-Code
soya.init(create_surface = 0)
\end_layout

\begin_layout Standard
However, this is of little interest, since PyGame doesn't seem to be able
 to blit on OpenGL surface.
\end_layout

\begin_layout Chapter
Extending Soya in Python
\end_layout

\begin_layout Section
Direct calls to OpenGL
\end_layout

\begin_layout Section
Writing new Materials
\end_layout

\begin_layout Section
Writing new CoordSysts
\end_layout

\begin_layout Section
Object reference
\end_layout

\begin_layout Chapter
Hacking the Soya sources
\end_layout

\begin_layout Standard
The source of the development version of Soya can be found on our Subversion
 repository: 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://gna.org/svn/?group=soya
\end_layout

\end_inset

.
 Soya is written in Pyrex, Python and there is still a small part in C.
\end_layout

\begin_layout Standard
You can propose patches on the Soya mailing list.
 However, I (=Jiba, the Soya maintainer) am a very occupied guy with a small
 memory :-).
 If you don't get any feedback after while, it probably doesn't mean you
 proposition has been rejected, but rather that no one got the time for
 looking at it, and it has been forgotten...
 in this case just insist!
\end_layout

\begin_layout Standard
Do not hesitate to ask for Subversion write access, too.
\end_layout

\begin_layout Description
Hint: Compiling Soya takes quite a long time.
 However, you can speed up the compilation by disabling GCC's optimization,
 as following:
\end_layout

\begin_deeper
\begin_layout LyX-Code
export CFLAGS=-O0
\end_layout

\end_deeper
\begin_layout Section
Dealing with Segfaults
\end_layout

\begin_layout Standard
Sometimes, Soya may crash and cause segmentation faults.
 It corresponds to error occurring at the Pyrex level.
 In this case, do as following to obtain a backtrace :
\end_layout

\begin_layout LyX-Code
gdb python
\end_layout

\begin_layout LyX-Code
run ./your_soya_script.py
\end_layout

\begin_layout LyX-Code
[wait until the script crashes]
\end_layout

\begin_layout LyX-Code
bt
\end_layout

\begin_layout LyX-Code
[the backtrace is here]
\end_layout

\end_body
\end_document
